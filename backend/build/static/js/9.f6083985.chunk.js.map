{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","alerts","setAlerts","isLoading","setIsLoading","isError","setIsError","validCityName","isValid","address","cityName","includes","setWeatherData","current","forecast","fetchWeatherData","a","FetchWeatherData","error","isNil","Sentry","useEffect","showLoader","latlong","timer","setInterval","clearInterval","loaderText","className","errorMessage"],"mappings":"sPAWe,qBACX,IAAMA,EAAiBC,qBAAWC,KAClC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAQMC,EAAgB,WAClB,GAAIC,YAAQf,EAAegB,SAAU,CACjC,IAAMC,EAAWjB,EAAegB,QAAQC,SACxC,OACIF,YAAQE,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAG3B,OAAO,GAGLC,EAAiB,SAACC,EAASC,EAAUb,GACnCO,YAAQK,IAAYL,YAAQM,KAC5Bd,EAAkBa,GAClBf,EAAmBgB,GACnBZ,EAAUD,KAIZc,EAAgB,uCAAG,oCAAAC,EAAA,sEAEjBZ,GAAa,GAFI,SAQPa,YAAiBxB,GARV,gBAIbM,EAJa,EAIbA,eACAF,EALa,EAKbA,gBACAI,EANa,EAMbA,OACAiB,EAPa,EAObA,MAIAC,YAAMD,IACNN,EAAeb,EAAgBF,EAAiBI,GAEhDK,GAAW,IAEXA,GAAW,GAhBE,kDAmBjBA,GAAW,GACXc,IAAA,MApBiB,yBAsBjBhB,GAAa,GAtBI,6EAAH,qDAgDtB,OArBAiB,qBAAU,WACNjB,EAAaX,EAAe6B,cAC7B,CAAC7B,EAAe6B,aAEnBD,qBAAU,WACFb,YAAQf,EAAe8B,SACvBR,IAEAT,GAAW,GAGf,IAAMkB,EAAQC,aAAY,WACtBV,MACD,MAEH,OAAO,WACHW,cAAcF,MAGnB,CAAC/B,EAAe8B,UAGf,cAAC,WAAD,UACKpB,EACG,cAAC,IAAD,CACIwB,WACIpB,IAAa,0CACyBd,EAAegB,QAAQC,SADhD,iBAEP,8CAId,cAAC,WAAD,UACKL,EACG,qBAAKuB,UAAU,sBAAf,SACI,qBAAKA,UAAU,8BAAf,SACI,cAAC,IAAD,CACIC,aACItB,IAAa,qFACoEd,EAAegB,QAAQC,SAD3F,kBAEP,0JAOlB,8BAlGbF,YAAQT,GAoGa,cAAC,IAAD,CACIA,eAAgBA,EAChBF,gBAAiBA,EACjBI,OAAQA,EACRQ,QAAShB,EAAegB,QACxBc,QAAS9B,EAAe8B,UAE5B","file":"static/js/9.f6083985.chunk.js","sourcesContent":["import React, {Fragment, useContext, useEffect, useState} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from '../../utils/FetchWeatherData'\r\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport isValid from '../../utils/ValidityChecker'\r\nimport {isNil} from 'lodash-es'\r\nimport ErrorBoundaryContainer from \"../error-boundary/ErrorBoundaryContainer\";\r\n\r\nexport default () => {\r\n    const addressContext = useContext(AddressContext)\r\n    const [weatherForecast, setWeatherForecast] = useState({})\r\n    const [weatherCurrent, setWeatherCurrent] = useState({})\r\n    const [alerts, setAlerts] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [isError, setIsError] = useState(false)\r\n\r\n    // check whether to show/hide weatherForecastContainer based on weatherCurrent\r\n    const showWeatherForecast = () => {\r\n        return isValid(weatherCurrent)\r\n    }\r\n\r\n    // check whether the cityName is valid\r\n    const validCityName = () => {\r\n        if (isValid(addressContext.address)) {\r\n            const cityName = addressContext.address.cityName\r\n            return (\r\n                isValid(cityName) &&\r\n                !cityName.includes('undefined') &&\r\n                !cityName.includes('null')\r\n            )\r\n        }\r\n        return false\r\n    }\r\n\r\n    const setWeatherData = (current, forecast, alerts) => {\r\n        if (isValid(current) && isValid(forecast)) {\r\n            setWeatherCurrent(current)\r\n            setWeatherForecast(forecast)\r\n            setAlerts(alerts)\r\n        }\r\n    }\r\n\r\n    const fetchWeatherData = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            const {\r\n                weatherCurrent,\r\n                weatherForecast,\r\n                alerts,\r\n                error,\r\n            } = await FetchWeatherData(addressContext)\r\n            // set the weatherCurrent and weatherForecast only when the data is non-empty\r\n            // this way, the old fetched data can be preserved when api call fail or limit exceed\r\n            if (isNil(error)) {\r\n                setWeatherData(weatherCurrent, weatherForecast, alerts)\r\n                // set the error to false state with the above successful weather data fetch\r\n                setIsError(false)\r\n            } else {\r\n                setIsError(true)\r\n            }\r\n        } catch (err) {\r\n            setIsError(true)\r\n            Sentry.captureException(err)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    // show the loading state when fetching address information using lat & long from addressContext\r\n    useEffect(() => {\r\n        setIsLoading(addressContext.showLoader)\r\n    }, [addressContext.showLoader])\r\n\r\n    useEffect(() => {\r\n        if (isValid(addressContext.latlong)) {\r\n            fetchWeatherData()\r\n        } else {\r\n            setIsError(true)\r\n        }\r\n        // fetch weather data every 60 minutes\r\n        const timer = setInterval(() => {\r\n            fetchWeatherData()\r\n        }, 3600000)\r\n\r\n        return () => {\r\n            clearInterval(timer)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [addressContext.latlong])\r\n\r\n    return (\r\n        <Fragment>\r\n            {isLoading ? (\r\n                <LoaderComponent\r\n                    loaderText={\r\n                        validCityName()\r\n                            ? `Wettervorhersage abrufen fÃ¼r ${addressContext.address.cityName} ðŸ˜Ž`\r\n                            : 'Abrufen der Daten mithilfe des Standortes'\r\n                    }\r\n                />\r\n            ) : (\r\n                <Fragment>\r\n                    {isError ? (\r\n                        <div className='flex justify-center'>\r\n                            <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                                <ErrorComponent\r\n                                    errorMessage={\r\n                                        validCityName()\r\n                                            ? `Etwas ist schief gelaufen. Fehler beim Abrufen der Wettervorhersage fÃ¼r ${addressContext.address.cityName}! ðŸ˜¢`\r\n                                            : 'Fehler beim Abrufen der Adressinformationen fÃ¼r Ihren Standort. Bitte suche nach einer beliebigen Stadt, um die Wettervorhersage zu erhalten!!'\r\n                                    }\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        // <ErrorBoundaryContainer>\r\n                            <div>\r\n                                {showWeatherForecast() ? (\r\n                                    <WeatherForecastContainer\r\n                                        weatherCurrent={weatherCurrent}\r\n                                        weatherForecast={weatherForecast}\r\n                                        alerts={alerts}\r\n                                        address={addressContext.address}\r\n                                        latlong={addressContext.latlong}\r\n                                    />\r\n                                ) : null}\r\n                             </div>\r\n                        // </ErrorBoundaryContainer>\r\n                    )}\r\n                </Fragment>\r\n            )}\r\n        </Fragment>\r\n    )\r\n}\r\n"],"sourceRoot":""}