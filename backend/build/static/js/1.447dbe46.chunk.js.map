{"version":3,"sources":["utils/FormatTime.js","utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/WeatherBackground.js","components/weather/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/SpeedConvert.js","utils/TemperatureConvert.js","components/weather/weather/WeatherIconComponent.js","components/weather/weather/InfoDetailComponent.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/weather/DayComponent.js","components/weather/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","components/weather/weather/AlertComponent.js","containers/weather-forecast/WeatherForecastContainer.js"],"names":["timestamp","timezone","formatType","moment","tz","format","axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","args","split","FetchWeatherData","a","weatherCurrent","weatherForecast","alerts","error","isValid","get","weatherData","data","current","sunrise","daily","sunset","timeFrames","hourly","forEach","hour","date","FormatTime","dt","Object","keys","includes","push","days","day","alert","Sentry","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","formatTime","time","isDawnDusk","currentTime","currentHour","timeHour","Number","getWeatherBackground","weather","icon","id","sunriseTime","sunsetTime","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","dawn","dusk","address","updateFavorites","useContext","AddressContext","useState","setDate","setTime","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","Intl","DateTimeFormat","weekday","month","year","isUndefined","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","isEmpty","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","getWeatherIcon","cToF","temp","Math","round","up","right","down","left","WeatherUnitContext","weatherUnit","updateWeatherUnit","computedTempValue","startsWith","description","WeatherIconComponent","src","alt","humidity","wind_speed","computedSpeedValue","wind_deg","ErrorBoundaryContainer","InfoComponent","InfoDetailComponent","LoaderComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","night","selectedDay","Date","toLocaleString","Timeframe","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","TimeframeComponent","DayComponent","daySelectHandler","event","start","end","sender_name","startTime","endTime","role","imageBorder","borderTopLeftRadius","borderTopRightRadius","showAlerts","setShowAlerts","style","background","CurrentWeatherContainer","ForecastContainer","AlertComponent"],"mappings":"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","file":"static/js/1.447dbe46.chunk.js","sourcesContent":["import moment from 'moment-timezone'\r\n\r\n/**\r\n * @param {Number} timestamp\r\n * @param {String} timezone\r\n * @param {String} formatType (moment format types)\r\n */\r\nexport default(timestamp, timezone, formatType) => {\r\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\r\n}\r\n","import axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport FormatTime from './FormatTime'\r\nimport * as Sentry from '@sentry/browser'\r\nimport isValid from './ValidityChecker'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nconst getURL = (latlong) => {\r\n  const args = latlong.split(\",\");\r\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=${args[1]}&lon=${args[0]}&exclude=minutely,flags&lang=de&units=metric&cnt=7&appid=992c820be22089cd7521bb068ba020c2`\r\n  // return `${API_URL}/forecast/coords/${latlong}?extend=hourly&exclude=minutely,flags`\r\n}\r\n\r\n/**\r\n * @param {String} latlong (-43.53333,172.63333)\r\n */\r\nconst FetchWeatherData = async ({latlong}) => {\r\n  let weatherCurrent = {}\r\n  let weatherForecast = {}\r\n  let alerts = []\r\n  let error = null\r\n\r\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\r\n  if (isValid(latlong)) {\r\n    try {\r\n      const weatherData = (await axios.get(getURL(latlong))).data\r\n      if (isValid(weatherData)) {\r\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\r\n        // displaying weatherIcon with day or night variants specific to location timezone\r\n        // parsing sunriseTime & sunsetTime according to the timezone\r\n        const timezone = weatherData.timezone\r\n\r\n        weatherCurrent = {\r\n          timezone,\r\n          ...weatherData.current,\r\n          sunrise: weatherData.daily[0].sunrise,\r\n          sunset: weatherData.daily[0].sunset,\r\n        }\r\n\r\n        // group 168 hours into days as keys in timeFrames\r\n        // group days and timeFrames into weatherForecast\r\n        const timeFrames = {}\r\n        // create date as the keys for timeFrame in timeFrames\r\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\r\n        weatherData.hourly.forEach((hour) => {\r\n          const date = FormatTime(hour.dt, timezone, 'MM/DD/YYYY')\r\n          if (Object.keys(timeFrames).includes(date)) {\r\n            timeFrames[date].push({timezone, ...hour})\r\n          } else {\r\n            timeFrames[date] = [{timezone, ...hour}]\r\n          }\r\n        })\r\n        const days = {}\r\n        // create date as the keys for the day in days\r\n        // i.e days: {'02/28/2020': {...day}, ...}\r\n        weatherData.daily.forEach((day) => {\r\n          const date = FormatTime(day.dt, timezone, 'MM/DD/YYYY')\r\n          // since there will be unique day objects in days\r\n          // just create a 'date' key with day object as value for as many days\r\n          days[date] = {timezone, ...day}\r\n        })\r\n\r\n        weatherForecast = {timeFrames, days}\r\n\r\n        if (isValid(weatherData.alerts)) {\r\n          weatherData.alerts.forEach((alert) => {\r\n            alerts.push({\r\n              timezone,\r\n              ...alert,\r\n            })\r\n          })\r\n        }\r\n      }\r\n    } catch (err) {\r\n      error = err\r\n      Sentry.captureException(err)\r\n    }\r\n  }\r\n\r\n  return {\r\n    weatherCurrent,\r\n    weatherForecast,\r\n    alerts,\r\n    error,\r\n  }\r\n}\r\n\r\nexport default FetchWeatherData\r\n","// modify carousel settings for timeframe and favorites component\r\n/**\r\n * time or favorite\r\n * @param {String} type\r\n * resolution can be mobile or tablet\r\n * @param {*} resolution\r\n */\r\nconst CarouselSettings = (type, resolution = 'mobile') => ({\r\n  width: '100%',\r\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\r\n  initialSlideHeight: type === 'time' ? 100 : 200,\r\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\r\n  speed: 1000,\r\n  easing: 'easeSinInOut',\r\n  defaultControlsConfig: {\r\n    prevButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    nextButtonStyle: {\r\n      display: 'none',\r\n    },\r\n    pagingDotsStyle: {\r\n      fill: '#cfd9df',\r\n      display: 'flex',\r\n      position: 'relative',\r\n      top: type === 'day' ? '25px' : '35px',\r\n      margin: '10px 5px',\r\n    },\r\n  },\r\n})\r\n\r\nexport default CarouselSettings\r\n","import moment from 'moment-timezone'\r\n\r\n/**\r\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\r\n * @param {String} type (sunrise | sunset | hour)\r\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst formatTime = (type, time, timezone) => {\r\n  if (type === 'sunrise' || type === 'sunset') {\r\n    return moment(time * 1000)\r\n      .tz(timezone)\r\n      .format('H:mm')\r\n  }\r\n  return moment().tz(timezone).format('H:mm')\r\n}\r\n\r\n/**\r\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\r\n * @param {String} currentTime\r\n * @param {String} sunriseTime\r\n * @param {String} sunsetTime\r\n */\r\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\r\n  const [currentHour, currentMinutes] = currentTime.split(':')\r\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\r\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\r\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\r\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\r\n      Number(currentMinutes) < Number(sunsetMinutes)\r\n      ? 'day'\r\n      : 'night'\r\n  } else {\r\n    return Number(currentHour) > Number(sunriseHour) &&\r\n      Number(currentHour) < Number(sunsetHour)\r\n      ? 'day'\r\n      : 'night'\r\n  }\r\n}\r\n\r\n/**\r\n * checks if it is dawn (sunrise) or dusk (sunset)\r\n * @param {*} currentTime\r\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\r\n */\r\nconst isDawnDusk = (currentTime, time) => {\r\n  const currentHour = currentTime.split(':')[0]\r\n  const timeHour = time.split(':')[0]\r\n  return (\r\n    Number(currentHour) === Number(timeHour) - 1 ||\r\n    Number(currentHour) === Number(timeHour)\r\n  )\r\n}\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent)\r\n * @param {String} icon (ex- cloudy)\r\n * @param {String} timezone (ex- Pacific/Auckland)\r\n */\r\nconst getWeatherBackground = (data) => {\r\n  const {timezone, sunrise, sunset} = data\r\n  const {icon, id} = data.weather[0];\r\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\r\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\r\n  const sunsetTime = formatTime('sunset', sunset, timezone)\r\n  const currentTime = formatTime('hour', 0, timezone)\r\n  // get the type like day or night\r\n  const type = getType(currentTime, sunriseTime, sunsetTime)\r\n  // check for dawn scenario before sunrise hour\r\n  const dawn = isDawnDusk(currentTime, sunriseTime)\r\n  // check for dusk scenario before sunset hour\r\n  const dusk = isDawnDusk(currentTime, sunsetTime)\r\n\r\n  if (icon) {\r\n    switch (icon) {\r\n      case '01d': case '02d':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\r\n      case '01n': case '02n':\r\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\r\n      case '10d':  case '09d': case '13d':\r\n        return `overcast-${type}`\r\n      case '04d': case '04n': case '03d': case '03n':\r\n        return `cloudy-${type}`\r\n      case '11d':\r\n        return 'thunderstorm'\r\n      case '50d':\r\n        if (id === 781) {\r\n          return 'tornado'\r\n        }\r\n        return `cloudy-${type}`\r\n      default:\r\n        return 'clear-day'\r\n    }\r\n  }\r\n  return 'clear-day'\r\n}\r\n\r\nexport default getWeatherBackground\r\n","import React, {Fragment, useContext, useEffect, useRef, useState} from 'react'\r\nimport {AddressContext} from '../../../context/AddressContext'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport moment from 'moment-timezone'\r\nimport {FaHeart, FaRegHeart} from 'react-icons/fa'\r\n\r\nexport default ({address, latlong, weatherCurrent}) => {\r\n    const {updateFavorites} = useContext(AddressContext)\r\n    const [date, setDate] = useState('')\r\n    const [time, setTime] = useState('')\r\n\r\n    // store formattedDateTime moment date object in the ref and update it for the first api call fetch\r\n    // this ref will be used to update date and time every second without making additional api calls\r\n    const formattedDateTimeRef = useRef()\r\n\r\n    const isBookmarked = () => {\r\n        if (localStorage.getItem('favorites')) {\r\n            const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n            const matched = favorites.filter(\r\n                (favorite) => favorite.address.cityName === address.cityName\r\n            )\r\n            return matched.length > 0\r\n        }\r\n        return false\r\n    }\r\n\r\n    const favoritesHandler = () => {\r\n        // first ever favorite item stored in localStorage\r\n        if (!localStorage.getItem('favorites')) {\r\n            localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\r\n            updateFavorites({\r\n                favorites: [{address, latlong}],\r\n            })\r\n        } else {\r\n            const favorites = JSON.parse(localStorage.getItem('favorites'))\r\n            const duplicates = favorites.filter(\r\n                (favorite) => favorite.address.cityName === address.cityName\r\n            )\r\n            if (!duplicates.length) {\r\n                // add newly added favorite to old favorites\r\n                const updatedFavorites = [...favorites, {address, latlong}]\r\n                localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\r\n                updateFavorites({\r\n                    favorites: updatedFavorites,\r\n                })\r\n            } else {\r\n                // if already favorite is selected\r\n                // remove it from favorites\r\n                const removeIndex = favorites.findIndex(\r\n                    (favorite) =>\r\n                        favorite.address.cityName === duplicates[0].address.cityName\r\n                )\r\n                if (removeIndex !== -1) {\r\n                    const newFavorites = [...favorites]\r\n                    newFavorites.splice(removeIndex, 1)\r\n                    localStorage.setItem('favorites', JSON.stringify(newFavorites))\r\n                    updateFavorites({\r\n                        favorites: newFavorites,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // format and set date & time based on the dateObj\r\n    const datetimeSetter = (dateObj) => {\r\n        const format = new Intl.DateTimeFormat('de-DE', {weekday: \"long\", day: \"2-digit\", month: \"long\", year: \"numeric\"}).format;\r\n        setDate(!isUndefined(dateObj) ? format(dateObj) : '')\r\n        setTime(!isUndefined(dateObj) ? dateObj.format('HH:mm:ss') : '')\r\n        formattedDateTimeRef.current = dateObj ? dateObj : null\r\n    }\r\n\r\n    useEffect(() => {\r\n        // reset date & time whenever weatherCurrent change\r\n        datetimeSetter(\r\n            moment(weatherCurrent.dt * 1000).tz(weatherCurrent.timezone)\r\n        )\r\n\r\n        const dateTimer = setInterval(() => {\r\n            if (weatherCurrent.dt) {\r\n                // update date and time every second only when there is a valid timestamp\r\n                const formattedDateTimeObj = moment\r\n                    .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\r\n                    .add(1, 's')\r\n                datetimeSetter(formattedDateTimeObj)\r\n            }\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(dateTimer)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [weatherCurrent])\r\n\r\n    return (\r\n        <div className='flex justify-between items-start'>\r\n            <div className='pt-4 px-4'>\r\n                <p className='font-bold'>{address.cityName}</p>\r\n                <div className='sm:flex-col md:flex md:flex-row font-light'>\r\n                    {!isEmpty(date) && !isEmpty(time) ? (\r\n                        <Fragment>\r\n                            <p>\r\n                                {date}\r\n                                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\r\n                            </p>\r\n                            <p>{time}</p>\r\n                        </Fragment>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n            <div\r\n                className='mt-6 mr-6 cursor-pointer text-2xl'\r\n                title={\r\n                    isBookmarked()\r\n                        ? 'Favorite entfernen'\r\n                        : 'Stadt zu Favoriten hinzufügen'\r\n                }\r\n                onClick={favoritesHandler}>\r\n                {isBookmarked() ? <FaHeart/> : <FaRegHeart/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","/**\r\n * @param {Number} deg\r\n */\r\nconst getWindDirection = deg => {\r\n  if (deg >= 0 && deg <= 45) {\r\n    return 'up'\r\n  } else if (deg >= 46 && deg <= 90) {\r\n    return 'up-right'\r\n  } else if (deg >= 91 && deg <= 135) {\r\n    return 'right'\r\n  } else if (deg >= 136 && deg <= 180) {\r\n    return 'down-right'\r\n  } else if (deg >= 181 && deg <= 225) {\r\n    return 'down'\r\n  } else if (deg >= 226 && deg <= 270) {\r\n    return 'down-left'\r\n  } else if (deg >= 271 && deg <= 315) {\r\n    return 'left'\r\n  } else {\r\n    return 'up-left'\r\n  }\r\n}\r\n\r\nexport default getWindDirection\r\n","import FormatTime from './FormatTime'\r\n\r\n/**\r\n * @param {Object} data (weatherCurrent, Timeframe, day)\r\n */\r\nexport default function getWeatherIcon(data) {\r\n    const {time, timezone} = data\r\n    const {icon, id} = data.weather[0];\r\n    const hour = FormatTime(time, timezone, 'H')\r\n    const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\r\n    if (icon) {\r\n        switch (icon) {\r\n            case '01d':\r\n                return 'day'\r\n            case '01n':\r\n                return 'night'\r\n            case '10d':\r\n                return `${type}-rain`\r\n            case '13d':\r\n                if (id === 611) {\r\n                    return 'sleet';\r\n                }\r\n                return `${type}-snow`\r\n            case '04d':\r\n            case '04n':\r\n                return 'cloudy'\r\n            case '02d':\r\n            case '03d':\r\n                return 'day-cloudy'\r\n            case '02n':\r\n            case '03n':\r\n                return 'night-cloudy'\r\n            case 'hail':\r\n                return 'hail'\r\n            case '11d':\r\n                return 'thunder'\r\n            case '50d':\r\n                if (id === 781) {\r\n                    return 'wi-tornado'\r\n                }\r\n                return `${type}-cloudy`\r\n            default:\r\n                return 'wi-na'\r\n        }\r\n    }\r\n    return 'wi-na'\r\n}\r\n","const mToK = speed => {\r\n  return Math.round(speed * 1.6)\r\n}\r\n\r\nconst kToM = speed => {\r\n  return Math.round(speed * 0.6)\r\n}\r\n\r\nexport {mToK, kToM}\r\n","const fToC = temp => {\r\n  return Math.round(((temp - 32) * 5) / 9)\r\n}\r\n\r\nconst cToF = temp => {\r\n  return Math.round((temp * 9) / 5 + 32)\r\n}\r\n\r\nexport {fToC, cToF}\r\n","import React from 'react'\r\nimport {\r\n  WiDirectionUp,\r\n  WiDirectionUpRight,\r\n  WiDirectionRight,\r\n  WiDirectionDownRight,\r\n  WiDirectionDown,\r\n  WiDirectionDownLeft,\r\n  WiDirectionLeft,\r\n  WiDirectionUpLeft,\r\n  WiDayFog,\r\n  WiNightFog,\r\n  WiDayCloudyWindy,\r\n  WiNightAltCloudyWindy,\r\n  WiTornado,\r\n  WiNa,\r\n  WiSunrise,\r\n  WiSunset\r\n} from 'react-icons/wi'\r\n\r\nexport default ({type}) => {\r\n  const ICON_TYPES = {\r\n    'wi-day-fog': <WiDayFog />,\r\n    'wi-night-fog': <WiNightFog />,\r\n    'wi-day-windy': <WiDayCloudyWindy />,\r\n    'wi-night-windy': <WiNightAltCloudyWindy />,\r\n    'wi-tornado': <WiTornado />,\r\n    'wi-na': <WiNa />,\r\n    up: <WiDirectionUp />,\r\n    'up-right': <WiDirectionUpRight />,\r\n    right: <WiDirectionRight />,\r\n    'down-right': <WiDirectionDownRight />,\r\n    down: <WiDirectionDown />,\r\n    'down-left': <WiDirectionDownLeft />,\r\n    left: <WiDirectionLeft />,\r\n    'up-left': <WiDirectionUpLeft />,\r\n    sunrise: <WiSunrise />,\r\n    sunset: <WiSunset />\r\n  }\r\n\r\n  return ICON_TYPES[type] || <WiNa />\r\n}\r\n","import React, {Fragment, useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\r\nimport getWindDirection from '../../../utils/WindDirection'\r\nimport getWeatherIcon from '../../../utils/WeatherIcon'\r\nimport {kToM} from '../../../utils/SpeedConvert'\r\nimport {cToF} from '../../../utils/TemperatureConvert'\r\nimport {FiPercent} from 'react-icons/fi'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\n\r\nexport default ({weatherCurrent}) => {\r\n\r\n    const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\r\n\r\n    /**\r\n     * type can be `temp` or `feels_like`\r\n     * @param {String} type\r\n     */\r\n    const computedTempValue = (type) => {\r\n        return weatherUnit === 'C'\r\n            ? Math.round(weatherCurrent[`${type}`])\r\n            : cToF(weatherCurrent[`${type}`])\r\n    }\r\n\r\n    const computedSpeedValue = () => {\r\n        return weatherUnit === 'C'\r\n            ? `${Math.round(weatherCurrent.wind_speed * 3.6)} kmph`\r\n            : `${kToM(weatherCurrent.wind_speed * 3.6)} mph`\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-3'>\r\n                <div className='flex-col sm:w-full lg:w-1/2'>\r\n                    <div className='flex flex-row justify-center sm:justify-start sm:items-center'>\r\n                        <div className='flex flex-col justify-center items-center'>\r\n                            <div>\r\n                                {getWeatherIcon(weatherCurrent).startsWith('wi') ?\r\n                                    (\r\n                                        <p className='text-6xl sm:mx-2 mt-2' title={weatherCurrent.description}>\r\n                                            {\r\n                                                <WeatherIconComponent type={getWeatherIcon(weatherCurrent)}/>\r\n                                            }\r\n                                        </p>\r\n                                    ) : (\r\n                                        <img\r\n                                            src={`/weather/${getWeatherIcon(weatherCurrent)}.svg`}\r\n                                            alt='icon'\r\n                                            title={weatherCurrent.description}\r\n                                            className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <p className='hidden sm:flex sm:flex-no-wrap font-medium -mt-4 ml-3 capitalize'>\r\n                                {weatherCurrent.weather[0].description}\r\n                            </p>\r\n                        </div>\r\n                        <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\r\n                            <div>\r\n                                <span className='text-6xl font-bold'> {computedTempValue('temp')}</span>\r\n                            </div>\r\n                            <p className='-mt-8 text-3xl'>\r\n                                <sup>o</sup>\r\n                            </p>\r\n                            <div className='-mt-10 mx-2 text-xl'>\r\n                                <span\r\n                                    className={`cursor-pointer ${weatherUnit === 'C' ? 'font-bold border-b border-light' : 'font-light opacity-75'}`}\r\n                                    title='Celsius'\r\n                                    onClick={() => updateWeatherUnit('C')}>                  C\r\n                                </span>\r\n                                <span className={`mx-1 opacity-25`}>|</span>\r\n                                <span\r\n                                    className={`cursor-pointer ${weatherUnit === 'F' ? 'font-bold border-b border-light' : 'font-light opacity-75'}`}\r\n                                    title='Fahrenheit'\r\n                                    onClick={() => updateWeatherUnit('F')}>F\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* weather info */}\r\n                <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\r\n                    <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\r\n                        {weatherCurrent.description}\r\n                    </p>\r\n                    <div className='text-sm sm:text-lg ml-8 mt-3 sm:mt-0'>\r\n                        <div className='flex flex-row sm:my-2'>\r\n                            <p className='font-light'>Feuchtigkeit:</p>&nbsp;\r\n                            <p className='mx-1 font-bold'>\r\n                                {Math.round(weatherCurrent.humidity)}\r\n                            </p>\r\n                            <p className='text-sm mt-1'>\r\n                                <FiPercent/>\r\n                            </p>\r\n                        </div>\r\n                        <div className='flex items-center sm:my-2'>\r\n                            <p>\r\n                                <span className='font-light'>Wind:</span>&nbsp;\r\n                                <span className='font-bold'>{computedSpeedValue()} </span>\r\n                            </p>\r\n                            <p className='text-3xl'>\r\n                                {\r\n                                    <WeatherIconComponent type={getWindDirection(weatherCurrent.wind_deg)}/>\r\n                                }\r\n                            </p>\r\n                        </div>\r\n                        <p>\r\n                            <span className='font-light sm:my-2'>Gefühlt:</span>&nbsp;\r\n                            <span className='font-bold'>\r\n                                {\r\n                                    computedTempValue('feels_like')\r\n                                }\r\n                            </span>\r\n                            <sup>o</sup>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React, {Fragment} from 'react'\r\nimport InfoComponent from '../../components/weather/weather/InfoComponent'\r\nimport InfoDetailComponent from '../../components/weather/weather/InfoDetailComponent'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\n\r\nexport default ({weatherCurrent, address, latlong}) => {\r\n  return (\r\n    <ErrorBoundaryContainer>\r\n      <Fragment>\r\n        {address && weatherCurrent ? (\r\n          <div>\r\n            <InfoComponent\r\n              address={address}\r\n              latlong={latlong}\r\n              weatherCurrent={weatherCurrent}\r\n            />\r\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\r\n          </div>\r\n        ) : (\r\n          <LoaderComponent />\r\n        )}\r\n      </Fragment>\r\n    </ErrorBoundaryContainer>\r\n  )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\r\nimport {cToF} from '../../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../../utils/WeatherIcon'\r\nimport FormatTime from '.././../../utils/FormatTime'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\n\r\nexport default (props) => {\r\n    const {day, index, selectedIndex} = props\r\n    const {weatherUnit} = useContext(WeatherUnitContext)\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n    /**\r\n     * type can be 'High' or 'Low'\r\n     * @param {String} type\r\n     */\r\n    const computedTempValue = (type) => {\r\n        return weatherUnit === 'C'\r\n            ? Math.round(type === \"day\" ? day.temp.day : day.temp.night)\r\n            : cToF(type === \"day\" ? day.temp.day : day.temp.night)\r\n    }\r\n\r\n    // emit event to forecastContainer\r\n    const selectedDay = () => {\r\n        props.selectedDay({day})\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`md:hover:bg-${colorTheme} md:hover:text-${theme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\r\n                index === selectedIndex ? `bg-${colorTheme} text-${theme}` : ''\r\n            }`}\r\n            onClick={selectedDay}>\r\n            <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center'>\r\n                <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\r\n                    {new Date(day.dt * 1000).toLocaleString('de-DE', {weekday: \"short\"})}\r\n                </p>\r\n                {/* icon */}\r\n                <div className='flex w-1/6 sm:w-full'>\r\n                    {getWeatherIcon(day).startsWith('wi') ? (\r\n                        <p\r\n                            className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\r\n                            title={day.description}>\r\n                            <WeatherIconComponent type={getWeatherIcon(day)}/>\r\n                        </p>\r\n                    ) : (\r\n                        <img\r\n                            src={`/weather/${getWeatherIcon(day)}.svg`}\r\n                            alt='icon'\r\n                            title={day.description}\r\n                            className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\r\n                        />\r\n                    )}\r\n                </div>\r\n                {/* high & low */}\r\n                <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\r\n                    <p className='mx-2 text-xs sm:text-sm'>\r\n                        {computedTempValue('day')}\r\n                        <sup>o</sup>\r\n                    </p>\r\n                    <p className='mx-2 text-xs'>\r\n                        {computedTempValue('night')}\r\n                        <sup>o</sup>\r\n                    </p>\r\n                </div>\r\n                {/* sunrise & sunset */}\r\n                <div\r\n                    className={`flex flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\r\n                    <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n                        <p\r\n                            className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\r\n                            title='sunrise'>\r\n                            <WeatherIconComponent type='sunrise'/>\r\n                        </p>\r\n                        <p>{FormatTime(day.sunrise, day.timezone, 'HH:mm')}</p>\r\n                    </div>\r\n                    <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\r\n                        <p\r\n                            className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\r\n                            title='sunset'>\r\n                            <WeatherIconComponent type='sunset'/>\r\n                        </p>\r\n                        <p>{FormatTime(day.sunset, day.timezone, 'HH:mm')}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\r\nimport {cToF, fToC} from '../../../utils/TemperatureConvert'\r\nimport getWeatherIcon from '../../../utils/WeatherIcon'\r\nimport FormatTime from '.././../../utils/FormatTime'\r\nimport WeatherIconComponent from './WeatherIconComponent'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\n\r\n\r\nexport default ({Timeframe}) => {\r\n    const {weatherUnit} = useContext(WeatherUnitContext)\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n    /**\r\n     * type can be `temp` or `feels_like`\r\n     * @param {String} type\r\n     */\r\n    const computedTempValue = (type) => {\r\n        return weatherUnit === 'C'\r\n            ? Math.round(Timeframe[`${type}`])\r\n            : cToF(Timeframe[`${type}`])\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${colorTheme} md:text-light`}>\r\n            <div>\r\n                {getWeatherIcon(Timeframe).startsWith('wi') ? (\r\n                    <p className='text-5xl mt-4' title={Timeframe.description}>\r\n                        <WeatherIconComponent type={getWeatherIcon(Timeframe)}/>\r\n                    </p>\r\n                ) : (\r\n                    <img\r\n                        src={`/weather/${getWeatherIcon(Timeframe)}.svg`}\r\n                        alt='icon'\r\n                        title={Timeframe.description}\r\n                        className='w-16 h-16 object-contain'\r\n                    />\r\n                )}\r\n            </div>\r\n            <p className='text-base pb-1'>\r\n                {computedTempValue('temp')}\r\n                <sup>o</sup>\r\n            </p>\r\n            <p className='text-xs pb-1'>\r\n                {computedTempValue('feels_like')}\r\n                <sup>o</sup>\r\n            </p>\r\n            <p className='text-sm font-medium'>\r\n                {FormatTime(Timeframe.dt, Timeframe.timezone, 'HH:mm')}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Fragment, useEffect, useState} from 'react'\r\nimport {isEmpty, isUndefined} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport DayComponent from '../../components/weather/weather/DayComponent'\r\nimport TimeframeComponent from '../../components/weather/weather/TimeframeComponent'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\nimport FormatTime from './../../utils/FormatTime'\r\n\r\nexport default ({cityName, weatherCurrent, weatherForecast}) => {\r\n    const [selectedDay, setSelectedDay] = useState('')\r\n    const [selectedDayIndex, setSelectedDayIndex] = useState(0)\r\n    const {dt, timezone} = weatherCurrent\r\n    // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\r\n    const updateSelectedDay = async () => {\r\n        // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\r\n        if (!isUndefined(weatherCurrent.dt)) {\r\n            const today = FormatTime(dt, timezone, 'MM/DD/YYYY')\r\n            // check if today key exist in days\r\n            if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\r\n                setSelectedDay(weatherForecast.days[today] ? today : '')\r\n                selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\r\n            }\r\n        }\r\n    }\r\n\r\n    // find the index of selectedDay in days object\r\n    const selectedDayIndexHandler = selectedDay => {\r\n        const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\r\n        setSelectedDayIndex(index !== -1 ? index : 0)\r\n    }\r\n\r\n    /**\r\n     * day is a date '02/28/2020'\r\n     * @param {String} day\r\n     */\r\n    const daySelectHandler = day => {\r\n        setSelectedDay(day)\r\n        selectedDayIndexHandler(day)\r\n    }\r\n\r\n    useEffect(() => {\r\n        updateSelectedDay()\r\n        // eslint-disable-next-line\r\n    }, [weatherForecast])\r\n\r\n    return (\r\n        <ErrorBoundaryContainer>\r\n            <Fragment>\r\n                {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\r\n                    <Fragment>\r\n                         {/*mobile*/}\r\n                        <div className='sm:hidden pb-3'>\r\n                            {weatherForecast.timeFrames[selectedDay] ? (\r\n                                <Carousel {...CarouselSettings('time')}>\r\n                                    {weatherForecast.timeFrames[selectedDay].map(\r\n                                        (Timeframe, index) => {\r\n                                            return (\r\n                                                <TimeframeComponent Timeframe={Timeframe} key={index}/>\r\n                                            )\r\n                                        }\r\n                                    )}\r\n                                </Carousel>\r\n                            ) : (\r\n                                <ErrorComponent\r\n                                    errorMessage={`Keine stündliche Vorhersage verfügbar für ${selectedDay}`}\r\n                                />\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* tablet and above devices */}\r\n                        <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\r\n                            {weatherForecast.timeFrames[selectedDay] ? (\r\n                                <Carousel {...CarouselSettings('time', 'tablet')}>\r\n                                    {weatherForecast.timeFrames[selectedDay].map(\r\n                                        (Timeframe, index) => {\r\n                                            return (\r\n                                                <TimeframeComponent Timeframe={Timeframe} key={index}/>\r\n                                            )\r\n                                        }\r\n                                    )}\r\n                                </Carousel>\r\n                            ) : (\r\n                                <ErrorComponent\r\n                                    errorMessage={`Keine stündliche Vorhersage verfügbar für ${selectedDay}`}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div\r\n                            className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\r\n                            {Object.keys(weatherForecast.days).map((day, index) => {\r\n                                // day is key in weatherForecast.days -> '02/28/2020'\r\n                                // index is the position of key -> 0\r\n                                return (\r\n                                    <DayComponent\r\n                                        day={weatherForecast.days[day]}\r\n                                        key={index}\r\n                                        index={index}\r\n                                        selectedIndex={selectedDayIndex}\r\n                                        selectedDay={() => daySelectHandler(day)}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    </Fragment>\r\n                ) : (\r\n                    <div className='mb-3'>\r\n                        {isEmpty(weatherForecast.days) ? (\r\n                            <ErrorComponent\r\n                                errorMessage={'Für diese Stadt sind keine Vorhersagedaten verfügbar!'}\r\n                                showCloseBtn={false}\r\n                            />\r\n                        ) : (\r\n                            <LoaderComponent\r\n                                loaderText={`Wettervorhersage für ${cityName} wird abgerufen.`}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </Fragment>\r\n        </ErrorBoundaryContainer>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {FaExclamationTriangle} from 'react-icons/fa'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\nimport FormatTime from '.././../../utils/FormatTime'\r\n\r\nexport default ({alert}) => {\r\n    const {timezone, event, start, end, description, sender_name} = alert\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n    const startTime = FormatTime(start, timezone, 'dddd h:mm A')\r\n    const endTime = FormatTime(end, timezone, 'dddd h:mm A')\r\n\r\n    return (\r\n        <div className={'flex flex-col justify-center items-center'}>\r\n            <div className={`w-11/12 lg:w-3/4 xl:max-w-5xl`}>\r\n                <div\r\n                    className={`bg-${theme} border-t-4 border border-red-700 rounded-lg text-${colorTheme} px-3 py-3 shadow-xl`}\r\n                    role='alert'>\r\n                    <div className='flex'>\r\n                        <div className='pt-1 px-2'>\r\n                                <FaExclamationTriangle\r\n                                    className={`text-red-700 text-lg`}\r\n                                    title=\"Warnung\"\r\n                                />\r\n                        </div>\r\n                        <div className='w-full'>\r\n                            <div className='flex flex-col sm:flex-row sm:justify-between sm:items-center'>\r\n                                <p className='sm:w-1/2 font-bold capitalize'>\r\n                                    {event}\r\n                                </p>\r\n                                <p className='sm:w-1/2 sm:text-right font-semibold text-xs'>\r\n                                    <span>{startTime}</span>\r\n                                    &nbsp;<span>-</span>&nbsp;\r\n                                    <span>{endTime}</span>\r\n                                </p>\r\n                            </div>\r\n                                <p className='text-sm font-medium py-8'>\r\n                                    <b>Description:&nbsp;</b>\r\n                                    {description}\r\n                                </p>\r\n                            <b>Sender: {sender_name}</b>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Fragment, useContext, useState} from 'react'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport getWeatherBackground from './../../utils/WeatherBackground'\r\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\r\nimport ForecastContainer from './../forecast/ForecastContainer'\r\nimport './WeatherForecastStyle.scss'\r\nimport AlertComponent from '../../components/weather/weather/AlertComponent'\r\nimport {isEmpty} from 'lodash-es'\r\n\r\nexport default ({weatherCurrent, weatherForecast, alerts, address, latlong,}) => {\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n    const WET_TYPES = ['10d', '13d', '09d']\r\n\r\n    // return rain or snow svg image for the above wet types\r\n    const weatherSVG = () => {\r\n        if (weatherCurrent.weather[0].icon === '13d') {\r\n            return 'snow'\r\n        }\r\n        return 'rain'\r\n    }\r\n\r\n    const imageBorder = {\r\n        borderTopLeftRadius: '1rem',\r\n        borderTopRightRadius: '1rem',\r\n    }\r\n\r\n    const [showAlerts, setShowAlerts] = useState(true)\r\n\r\n    const toggleWeatherAlerts = () => {\r\n        setShowAlerts(!showAlerts)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div\r\n                className={'flex flex-col justify-center items-center lg:px-5 pt-10'}>\r\n                <div\r\n                    className={`sm:w-full lg:w-5/6 xl:max-w-6xl bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none rounded-t-2xl shadow-lg`}>\r\n                    <div className='relative overflow-hidden'>\r\n                        <img\r\n                            src={`/weather-backgrounds/${getWeatherBackground(\r\n                                weatherCurrent\r\n                            )}.jpg`}\r\n                            alt='clear day'\r\n                            className='w-full object-cover object-center weather-background'\r\n                            style={imageBorder}\r\n                        />\r\n                         {/*show rain or snow svg only when weather icon exist in WET_TYPES*/}\r\n                        <div>\r\n                            {WET_TYPES.includes(weatherCurrent.weather[0].icon) && (\r\n                                <img\r\n                                    src={`/weather-backgrounds/${weatherSVG()}.svg`}\r\n                                    alt='clear day'\r\n                                    className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\r\n                                    style={imageBorder}\r\n                                />\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* current weather container should be on the image on mobile and small devices */}\r\n                        <div\r\n                            className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n                            style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n                            <CurrentWeatherContainer\r\n                                weatherCurrent={weatherCurrent}\r\n                                address={address}\r\n                                latlong={latlong}\r\n                            />\r\n                        </div>\r\n\r\n                        {/* current weather and forecast container should be on the image from medium devices */}\r\n                        <div\r\n                            className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\r\n                            style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\r\n                            <CurrentWeatherContainer\r\n                                weatherCurrent={weatherCurrent}\r\n                                address={address}\r\n                                latlong={latlong}\r\n                            />\r\n                            <ForecastContainer\r\n                                cityName={address.cityName}\r\n                                weatherCurrent={weatherCurrent}\r\n                                weatherForecast={weatherForecast}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='block md:hidden'>\r\n                        <ForecastContainer\r\n                            cityName={address.cityName}\r\n                            weatherCurrent={weatherCurrent}\r\n                            weatherForecast={weatherForecast}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='relative'>\r\n                {/* weather alerts */}\r\n                {!isEmpty(alerts) ? (\r\n                    <Fragment>\r\n                        <div className='text-center pb-5'>\r\n                            <p>\r\n                                <button\r\n                                    className={`bg-${colorTheme} text-${theme} font-semibold mt-6 py-3 px-6 rounded-full capitalize`}\r\n                                    onClick={toggleWeatherAlerts}>\r\n                                    {showAlerts ? 'Verstecke' : 'Anzeigen'} Wetter Warnungen\r\n                                </button>\r\n                            </p>\r\n                        </div>\r\n                        <div className='pb-5'>\r\n                            {showAlerts ? (\r\n                                <Fragment>\r\n                                    {alerts.map((alert, index) => {\r\n                                        return (\r\n                                            <div className='my-2' key={index}>\r\n                                                <AlertComponent alert={alert}/>\r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </Fragment>\r\n                            ) : null}\r\n                        </div>\r\n                    </Fragment>\r\n                ) : null}\r\n            </div>\r\n         </Fragment>\r\n    )\r\n}\r\n"],"sourceRoot":""}