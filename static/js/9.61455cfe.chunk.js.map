{"version":3,"sources":["containers/weather/WeatherContainer.js"],"names":["addressContext","useContext","AddressContext","useState","weatherForecast","setWeatherForecast","weatherCurrent","setWeatherCurrent","alerts","setAlerts","isLoading","setIsLoading","isError","setIsError","validCityName","isValid","address","cityName","includes","setWeatherData","current","forecast","fetchWeatherData","a","FetchWeatherData","error","isNil","Sentry","useEffect","showLoader","latlong","timer","setInterval","clearInterval","loaderText","className","errorMessage"],"mappings":"iPAWe,qBACX,IAAMA,EAAiBC,qBAAWC,KAClC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAQMC,EAAgB,WAClB,GAAIC,YAAQf,EAAegB,SAAU,CACjC,IAAMC,EAAWjB,EAAegB,QAAQC,SACxC,OACIF,YAAQE,KACPA,EAASC,SAAS,eAClBD,EAASC,SAAS,QAG3B,OAAO,GAGLC,EAAiB,SAACC,EAASC,EAAUb,GACnCO,YAAQK,IAAYL,YAAQM,KAC5Bd,EAAkBa,GAClBf,EAAmBgB,GACnBZ,EAAUD,KAIZc,EAAgB,uCAAG,oCAAAC,EAAA,sEAEjBZ,GAAa,GAFI,SAQPa,YAAiBxB,GARV,gBAIbM,EAJa,EAIbA,eACAF,EALa,EAKbA,gBACAI,EANa,EAMbA,OACAiB,EAPa,EAObA,MAIAC,YAAMD,IACNN,EAAeb,EAAgBF,EAAiBI,GAEhDK,GAAW,IAEXA,GAAW,GAhBE,kDAmBjBA,GAAW,GACXc,IAAA,MApBiB,yBAsBjBhB,GAAa,GAtBI,6EAAH,qDAgDtB,OArBAiB,qBAAU,WACNjB,EAAaX,EAAe6B,cAC7B,CAAC7B,EAAe6B,aAEnBD,qBAAU,WACFb,YAAQf,EAAe8B,SACvBR,IAEAT,GAAW,GAGf,IAAMkB,EAAQC,aAAY,WACtBV,MACD,MAEH,OAAO,WACHW,cAAcF,MAGnB,CAAC/B,EAAe8B,UAGf,cAAC,WAAD,UACKpB,EACG,cAAC,IAAD,CACIwB,WACIpB,IAAa,0CACyBd,EAAegB,QAAQC,SADhD,iBAEP,8CAId,cAAC,WAAD,UACKL,EACG,qBAAKuB,UAAU,sBAAf,SACI,qBAAKA,UAAU,8BAAf,SACI,cAAC,IAAD,CACIC,aACItB,IAAa,qFACoEd,EAAegB,QAAQC,SAD3F,kBAEP,0JAOlB,8BAlGbF,YAAQT,GAoGa,cAAC,IAAD,CACIA,eAAgBA,EAChBF,gBAAiBA,EACjBI,OAAQA,EACRQ,QAAShB,EAAegB,QACxBc,QAAS9B,EAAe8B,UAE5B","file":"static/js/9.61455cfe.chunk.js","sourcesContent":["import React, {Fragment, useContext, useEffect, useState} from 'react'\nimport {AddressContext} from '../../context/AddressContext'\nimport FetchWeatherData from '../../utils/FetchWeatherData'\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\nimport * as Sentry from '@sentry/browser'\nimport isValid from '../../utils/ValidityChecker'\nimport {isNil} from 'lodash-es'\nimport ErrorBoundaryContainer from \"../error-boundary/ErrorBoundaryContainer\";\n\nexport default () => {\n    const addressContext = useContext(AddressContext)\n    const [weatherForecast, setWeatherForecast] = useState({})\n    const [weatherCurrent, setWeatherCurrent] = useState({})\n    const [alerts, setAlerts] = useState([])\n    const [isLoading, setIsLoading] = useState(false)\n    const [isError, setIsError] = useState(false)\n\n    // check whether to show/hide weatherForecastContainer based on weatherCurrent\n    const showWeatherForecast = () => {\n        return isValid(weatherCurrent)\n    }\n\n    // check whether the cityName is valid\n    const validCityName = () => {\n        if (isValid(addressContext.address)) {\n            const cityName = addressContext.address.cityName\n            return (\n                isValid(cityName) &&\n                !cityName.includes('undefined') &&\n                !cityName.includes('null')\n            )\n        }\n        return false\n    }\n\n    const setWeatherData = (current, forecast, alerts) => {\n        if (isValid(current) && isValid(forecast)) {\n            setWeatherCurrent(current)\n            setWeatherForecast(forecast)\n            setAlerts(alerts)\n        }\n    }\n\n    const fetchWeatherData = async () => {\n        try {\n            setIsLoading(true)\n            const {\n                weatherCurrent,\n                weatherForecast,\n                alerts,\n                error,\n            } = await FetchWeatherData(addressContext)\n            // set the weatherCurrent and weatherForecast only when the data is non-empty\n            // this way, the old fetched data can be preserved when api call fail or limit exceed\n            if (isNil(error)) {\n                setWeatherData(weatherCurrent, weatherForecast, alerts)\n                // set the error to false state with the above successful weather data fetch\n                setIsError(false)\n            } else {\n                setIsError(true)\n            }\n        } catch (err) {\n            setIsError(true)\n            Sentry.captureException(err)\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    // show the loading state when fetching address information using lat & long from addressContext\n    useEffect(() => {\n        setIsLoading(addressContext.showLoader)\n    }, [addressContext.showLoader])\n\n    useEffect(() => {\n        if (isValid(addressContext.latlong)) {\n            fetchWeatherData()\n        } else {\n            setIsError(true)\n        }\n        // fetch weather data every 60 minutes\n        const timer = setInterval(() => {\n            fetchWeatherData()\n        }, 3600000)\n\n        return () => {\n            clearInterval(timer)\n        }\n        // eslint-disable-next-line\n    }, [addressContext.latlong])\n\n    return (\n        <Fragment>\n            {isLoading ? (\n                <LoaderComponent\n                    loaderText={\n                        validCityName()\n                            ? `Wettervorhersage abrufen fÃ¼r ${addressContext.address.cityName} ðŸ˜Ž`\n                            : 'Abrufen der Daten mithilfe des Standortes'\n                    }\n                />\n            ) : (\n                <Fragment>\n                    {isError ? (\n                        <div className='flex justify-center'>\n                            <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\n                                <ErrorComponent\n                                    errorMessage={\n                                        validCityName()\n                                            ? `Etwas ist schief gelaufen. Fehler beim Abrufen der Wettervorhersage fÃ¼r ${addressContext.address.cityName}! ðŸ˜¢`\n                                            : 'Fehler beim Abrufen der Adressinformationen fÃ¼r Ihren Standort. Bitte suche nach einer beliebigen Stadt, um die Wettervorhersage zu erhalten!!'\n                                    }\n                                />\n                            </div>\n                        </div>\n                    ) : (\n                        // <ErrorBoundaryContainer>\n                            <div>\n                                {showWeatherForecast() ? (\n                                    <WeatherForecastContainer\n                                        weatherCurrent={weatherCurrent}\n                                        weatherForecast={weatherForecast}\n                                        alerts={alerts}\n                                        address={addressContext.address}\n                                        latlong={addressContext.latlong}\n                                    />\n                                ) : null}\n                             </div>\n                        // </ErrorBoundaryContainer>\n                    )}\n                </Fragment>\n            )}\n        </Fragment>\n    )\n}\n"],"sourceRoot":""}