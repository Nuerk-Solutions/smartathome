{"version":3,"sources":["components/weather/loader/LoaderComponent.js","components/weather/icon/IconComponent.js","components/weather/header/HeaderComponent.js","components/weather/footer/FooterComponent.js","App.js","index.js","context/ThemeContext.js"],"names":["loaderText","theme","useContext","ThemeContext","className","iconType","toggleTheme","isEmpty","checked","icons","IconComponent","unchecked","onChange","colorTheme","style","backgroundColor","Date","toLocaleTimeString","toLocaleDateString","HomeContainer","lazy","App","HeaderComponent","fallback","LoaderComponent","path","exact","component","FooterComponent","ReactDOM","render","StrictMode","document","getElementById","React","createContext","ThemeContextProvider","children","useState","setTheme","saveThemePreference","localStorage","setItem","JSON","stringify","useEffect","getItem","parse","hour","moment","format","daynightChecker","Provider","value","selectedTheme"],"mappings":"2GAAA,iCAIe,gBAAmB,IAAjBA,EAAgB,EAAhBA,WACNC,EAASC,qBAAWC,KAApBF,MACP,OACI,sBAAKG,UAAU,mDAAf,UACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,sBAElBJ,GACG,sBACII,UAAS,sDACK,UAAVH,EAAoB,OAAS,SAFrC,UAIKD,EACD,sBAAMI,UAAU,qBAAhB,yB,8OCfL,cAAiB,IAAfC,EAAc,EAAdA,SACb,OACI,8BACkB,UAAbA,EACG,mBAAGD,UAAU,cAAb,SACI,cAAC,IAAD,MAGJ,mBAAGA,UAAU,cAAb,SACI,cAAC,IAAD,S,QCLL,aACX,MAA6BF,qBAAWC,KAAjCF,EAAP,EAAOA,MAAOK,EAAd,EAAcA,YAEd,OACI,qBAAKF,UAAU,0CAAf,SACI,8BAEMG,YAAQN,GASN,KARA,cAAC,IAAD,CACIO,QAAmB,UAAVP,EACTQ,MAAO,CACHD,QAAS,cAACE,EAAD,CAAeL,SAAU,UAClCM,UAAW,cAACD,EAAD,CAAeL,SAAU,UAExCO,SAAUN,SClBnB,aACb,MAA4BJ,qBAAWC,KAAhCF,EAAP,EAAOA,MAAOY,EAAd,EAAcA,WAEd,OACE,sBACET,UAAS,eAAUS,EAAV,SACTC,MAAO,CACLC,gBAA2B,SAAVd,EAAmB,UAAY,WAHpD,UAKE,qBACEG,UAAS,iFAA4ES,EAA5E,YADX,SAEE,mBAAGT,UAAU,6EAAb,UACG,IAAIY,MAAOC,yBAGhB,mBAAGb,UAAU,8BAAb,UACG,IAAIY,MAAOE,2B,QCZdC,EAAgBC,gBAAK,kBAAM,uDAiElBC,MA/Df,WACI,IAAOpB,EAASC,qBAAWC,KAApBF,MAEP,OACI,cAAC,IAAD,UACI,sBAAKG,UAAS,cAASH,EAAT,sCAAd,UACI,8BACI,cAACqB,EAAD,MAEJ,8BACI,cAAC,WAAD,CACIC,SAAU,cAACC,EAAA,EAAD,CAAiBxB,WAAW,uBAD1C,SAEI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOyB,KAAK,IAAIC,OAAK,EAACC,UAAWR,UAI7C,8BACI,cAACS,EAAD,YCpBpBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC5B,EAAA,EAAD,UACI,cAAC,EAAD,QAGR6B,SAASC,eAAe,U,uJCVpB9B,EAAe+B,IAAMC,cAAc,CACrClC,MAAO,QACPK,YAAa,eAIX8B,EAAuB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC3B,EAA0BC,mBAAS,IAAnC,mBAAOrC,EAAP,KAAcsC,EAAd,KACM1B,EAAuB,UAAVZ,EAAoB,OAAS,QAQ1CuC,EAAsB,SAAAvC,GACxBwC,aAAaC,QAAQ,QAASC,KAAKC,UAAU3C,KAyBjD,OAXA4C,qBAAU,WAGDJ,aAAaK,QAAQ,SAGtBP,EAASI,KAAKI,MAAMN,aAAaK,QAAQ,WAjBzB,WACpB,IAAME,EAAOC,MAASC,OAAO,KACzBF,GAAQ,GAAKA,EAAO,IACpBT,EAAS,SACTC,EAAoB,WAEpBD,EAAS,QACTC,EAAoB,SAQpBW,KAKL,IAGC,cAAChD,EAAaiD,SAAd,CAAuBC,MAAO,CAACpD,QAAOY,aAAYP,YAjClC,WAChB,IAAMgD,EAA0B,UAAVrD,EAAoB,OAAS,QACnDsC,EAASe,GACTd,EAAoBc,KA8BpB,SACKjB,O","file":"static/js/main.5768634e.chunk.js","sourcesContent":["import React, {useContext} from 'react'\nimport './LoaderStyle.scss'\nimport {ThemeContext} from '../../../context/ThemeContext'\n\nexport default ({loaderText}) => {\n    const {theme} = useContext(ThemeContext)\n    return (\n        <div className='flex flex-col w-full justify-center items-center'>\n            <div className='spinner'>\n                <div className='double-bounce1'></div>\n                <div className='double-bounce2'></div>\n            </div>\n            {loaderText && (\n                <div\n                    className={`mx-auto text-center text-sm font-light text-${\n                        theme === 'light' ? 'dark' : 'light'\n                    }`}>\n                    {loaderText}\n                    <span className='text-2xl text-fade'>...</span>\n                </div>\n            )}\n        </div>\n    )\n}\n","import React from 'react'\nimport {FaMoon, FaSun} from 'react-icons/fa'\n\nexport default ({iconType}) => {\n    return (\n        <div>\n            {iconType === 'light' ? (\n                <p className='text-toggle'>\n                    <FaSun/>\n                </p>\n            ) : (\n                <p className='text-toggle'>\n                    <FaMoon/>\n                </p>\n            )}\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport Toggle from 'react-toggle'\nimport './ReactToggle.scss'\nimport {ThemeContext} from '../../../context/ThemeContext'\nimport IconComponent from '../icon/IconComponent'\nimport {isEmpty} from 'lodash-es'\n\nexport default () => {\n    const {theme, toggleTheme} = useContext(ThemeContext)\n\n    return (\n        <div className='flex justify-end items-center px-5 py-5'>\n            <div>\n                {/* below condition to avoid toggle glitch effect on page refresh */}\n                {!isEmpty(theme) ? (\n                    <Toggle\n                        checked={theme === 'light'}\n                        icons={{\n                            checked: <IconComponent iconType={'light'}/>,\n                            unchecked: <IconComponent iconType={'dark'}/>,\n                        }}\n                        onChange={toggleTheme}\n                    />\n                ) : null}\n            </div>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../../context/ThemeContext'\n\nexport default () => {\n  const {theme, colorTheme} = useContext(ThemeContext)\n\n  return (\n    <div\n      className={`text-${colorTheme} pb-3`}\n      style={{\n        backgroundColor: theme === 'dark' ? '#292929' : '#e8ebee',\n      }}>\n      <div\n        className={`flex flex-col text-center sm:flex sm:flex-row justify-around pt-5 text-${colorTheme} text-sm`}>\n        <p className='flex flex-no-wrap justify-center items-center my-2 sm:my-0 w-full sm:w-1/2'>\n          {new Date().toLocaleTimeString()}\n        </p>\n      </div>\n      <p className='mx-auto text-center text-sm'>\n        {new Date().toLocaleDateString()}\n      </p>\n    </div>\n  )\n}\n","import React, {lazy, Suspense, useContext} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {ThemeContext} from './context/ThemeContext'\nimport HeaderComponent from './components/weather/header/HeaderComponent'\nimport FooterComponent from './components/weather/footer/FooterComponent'\nimport LoaderComponent from './components/weather/loader/LoaderComponent'\n\nconst HomeContainer = lazy(() => import('./containers/home/HomeContainer'))\n\nfunction App() {\n    const {theme} = useContext(ThemeContext)\n\n    return (\n        <Router>\n            <div className={` bg-${theme} tracking-wider border-box wrapper`}>\n                <div>\n                    <HeaderComponent/>\n                </div>\n                <div>\n                    <Suspense\n                        fallback={<LoaderComponent loaderText='Loading components'/>}>\n                        <Switch>\n                            <Route path='/' exact component={HomeContainer}></Route>\n                        </Switch>\n                    </Suspense>\n                </div>\n                <div>\n                    <FooterComponent/>\n                </div>\n            </div>\n        </Router>\n    )\n    // return (\n    //     <Router>\n    //         <Navbar>\n    //             <NavItem icon={<PlusIcon/>} destinationPath=\"/dvb\"/>\n    //             <NavItem icon={<BellIcon/>} destinationPath=\"/quote\"/>\n    //             <NavItem icon={<MessengerIcon/>} destinationPath=\"/cron\"/>\n    //             <NavItem icon={<ArrowIcon/>} destinationPath=\"https://iamsainikhil.com/weather-react/\"/>\n    //         </Navbar>\n    //\n    //         <Switch>\n    //             <Route exact path=\"/dvb/:stop?/:amount?/:offset?\"\n    //                    children={() => <DvbWidget name={\"Malterstraße\"}/>}/>\n    //             <Route path=\"/quote\" children={() => <Quote />}/>\n    //             <Route path=\"/cron\" children={() => <Guide />}/>\n    //             <DvbWidget name={\"Malterstraße\"}/>\n    //         </Switch>\n    //     </Router>\n    // );\n}\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar\">\n            <ul className=\"navbar-nav\"> {props.children}</ul>\n        </nav>\n    );\n}\n\nfunction NavItem(props) {\n\n    return (\n        <li className=\"nav-item\">\n            <a href={props.destinationPath || \"#\"} className=\"icon-button\">\n                {props.icon}\n            </a>\n            {open && props.children}\n        </li>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport {ThemeContextProvider} from './context/ThemeContext'\nimport './styles/main.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeContextProvider>\n          <App />\n      </ThemeContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React, {useEffect, useState} from 'react'\nimport moment from 'moment-timezone'\n\nconst ThemeContext = React.createContext({\n    theme: 'light',\n    toggleTheme: () => {\n    }\n})\n\nconst ThemeContextProvider = ({children}) => {\n    const [theme, setTheme] = useState('')\n    const colorTheme = theme === 'light' ? 'dark' : 'light'\n\n    const toggleTheme = () => {\n        const selectedTheme = theme === 'light' ? 'dark' : 'light'\n        setTheme(selectedTheme)\n        saveThemePreference(selectedTheme)\n    }\n\n    const saveThemePreference = theme => {\n        localStorage.setItem('theme', JSON.stringify(theme))\n    }\n\n    const daynightChecker = () => {\n        const hour = moment().format('H')\n        if (hour >= 6 && hour < 18) {\n            setTheme('light')\n            saveThemePreference('light')\n        } else {\n            setTheme('dark')\n            saveThemePreference('dark')\n        }\n    }\n\n    useEffect(() => {\n        // set theme based on the time on initial application load and\n        // when there is no theme preference in the localStorage\n        if (!localStorage.getItem('theme')) {\n            daynightChecker()\n        } else {\n            setTheme(JSON.parse(localStorage.getItem('theme')))\n        }\n        // eslint-disable-next-line\n    }, [])\n\n    return (\n        <ThemeContext.Provider value={{theme, colorTheme, toggleTheme}}>\n            {children}\n        </ThemeContext.Provider>\n    )\n}\n\nexport {ThemeContext, ThemeContextProvider}\n"],"sourceRoot":""}