{"version":3,"sources":["utils/ValidCityName.js","components/weather/address/AddressComponent.js","components/weather/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js","utils/ValidityChecker.js","components/weather/error/ErrorComponent.js","context/WeatherUnitContext.js","utils/FetchIPAddress.js","context/AddressContext.js","containers/error-boundary/ErrorBoundaryContainer.js"],"names":["validName","name","showDelimeter","isValid","address","selectedAddressIndex","index","addressSelected","useContext","ThemeContext","theme","colorTheme","className","onClick","cityName","IconComponent","type","color","TYPES","search","up","down","props","style","backgroundColor","letterSpacing","id","placeholder","onChange","citySearch","onKeyDown","keyPressed","tabIndex","value","city","showCaret","caretClicked","showAddresses","axiosRetry","axios","retryDelay","exponentialDelay","AutoCompleteContainer","listRef","React","createRef","undefined","state","showLoader","addresses","scrollOffset","errorMessage","debounceAddress","debounce","getAddresses","searchCity","event","setState","target","toggleAddresses","prevState","setCity","a","split","context","updateState","latlong","keyCodeHandler","e","keyCode","Math","max","current","scrollTo","left","top","behavior","min","length","message","this","trim","isNil","isNaN","Number","get","hits","data","results","map","hit","en","default","administrative","country","lat","lng","cityId","objectID","handleError","Sentry","clearState","SearchComponent","LoaderComponent","ref","AddressComponent","ErrorComponent","showCloseBtn","closeError","Component","contextType","AddressContext","WeatherContainer","lazy","FavoritesContainer","WeatherUnitContext","ErrorBoundaryContainer","fallback","loaderText","isEmpty","role","xmlns","viewBox","d","createContext","weatherUnit","WeatherUnitContextProvider","children","useState","setWeatherUnit","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","Provider","updateWeatherUnit","unit","fetchIPAddress","AddressContextProvider","updateFavorites","favorites","formatCoords","latitude","longitude","updateAddress","getIPAddress","region","country_name","Latitude","Longitude","getAddress","navigator","geolocation","getCurrentPosition","position","coords","error","console","getFavorites","hasError","eventId","errorInfo","scope","setExtras"],"mappings":"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","file":"static/js/6.13f71279.chunk.js","sourcesContent":["import isValid from './ValidityChecker'\n\n/**\n * util func to check and return the valid name\n * @param {*} name (city or state or country)\n * @param {*} showDelimeter (false for country)\n */\nconst validName = (name, showDelimeter = true) => {\n  return isValid(name) ? `${name}${showDelimeter ? ', ' : ''}` : ''\n}\n\nexport default validName\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../../context/ThemeContext'\n\nexport default ({address, selectedAddressIndex, index, addressSelected}) => {\n    const {theme, colorTheme} = useContext(ThemeContext)\n\n    return (\n        <p\n            className={`px-5 py-1 cursor-pointer item hover:text-${theme} hover:bg-${colorTheme} ${\n                index === selectedAddressIndex\n                    ? `text-${theme} bg-${colorTheme}`\n                    : `text-${colorTheme}`\n            }`}\n            onClick={addressSelected}>\n            {address.cityName}\n        </p>\n    )\n}\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../../context/ThemeContext'\nimport {FiSearch} from 'react-icons/fi'\nimport {IoIosArrowDown, IoIosArrowUp} from 'react-icons/io'\n\nconst IconComponent = ({type, color}) => {\n    const TYPES = {\n        search: <FiSearch/>,\n        up: <IoIosArrowUp/>,\n        down: <IoIosArrowDown/>,\n    }\n    return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\n}\n\nexport default (props) => {\n    const {theme, colorTheme} = useContext(ThemeContext)\n\n    return (\n        <div className='h-12 mx-5 mt-5'>\n            <div className='relative'>\n                <div className='absolute top-0 left-0 ml-5 mt-3'>\n                    <IconComponent type='search' color={colorTheme}/>\n                </div>\n                <input\n                    style={{\n                        backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\n                        letterSpacing: '0.05em',\n                    }}\n                    className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate text-${colorTheme}`}\n                    id='grid-first-name'\n                    type='text'\n                    placeholder='Stadtname oder PLZ eingeben'\n                    onChange={props.citySearch}\n                    onKeyDown={props.keyPressed}\n                    tabIndex='0'\n                    value={props.city}\n                />\n                {props.showCaret ? (\n                    <div\n                        className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\n                        onClick={props.caretClicked}>\n                        {props.showAddresses ? (<IconComponent type='up' color={colorTheme}/>) :\n                            (<IconComponent type='down' color={colorTheme}/>)}\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    )\n}\n","import React, {Component, Fragment} from 'react'\nimport axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport './AutoCompleteStyle.scss'\nimport AddressComponent from '../../components/weather/address/AddressComponent.js'\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\nimport {AddressContext} from '../../context/AddressContext'\nimport SearchComponent from '../../components/weather/search/SearchComponent'\nimport * as Sentry from '@sentry/browser'\nimport validName from '../../utils/ValidCityName'\nimport isValid from '../../utils/ValidityChecker'\nimport {debounce, isNil} from 'lodash-es'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nexport default class AutoCompleteContainer extends Component {\n  static contextType = AddressContext\n  listRef = React.createRef(undefined)\n  state = {\n    showCaret: false,\n    showAddresses: false,\n    showLoader: false,\n    city: '',\n    addresses: [],\n    selectedAddressIndex: 0,\n    scrollOffset: 0,\n    errorMessage: '',\n  }\n\n  handleError(message) {\n    this.setState({errorMessage: message})\n  }\n\n  // debounced function\n  debounceAddress = debounce(this.getAddresses, 1000)\n\n  searchCity = (event) => {\n    this.setState({city: event.target.value, errorMessage: ''})\n    this.debounceAddress()\n  }\n\n  // fetch valid matched addresses for searched city\n  async getAddresses() {\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\n    // city value could be empty when this function run\n    // so this extra check will fix the bug of showing addresses list when there is no city name\n    if (this.state.city.trim()) {\n      try {\n        this.setState({showLoader: true})\n        // the below latlong check is just a workaround for accessing correct api route\n        // otherwise, no matter how good the city name is, when latlong is empty user will get 404 since there is no route without latlong on the api server\n        const latlong =\n          !isNil(this.context.latlong) && !isNaN(Number(this.context.latlong))\n            ? this.context.latlong\n            : '00,00'\n\n        const {hits} = (\n          await axios.get(\n            `https://weather-react-api-dev.now.sh/places/query/${this.state.city}/${latlong}`\n          )\n        ).data\n\n        // populate addresses and show them if matching cities exist\n        if (isValid(hits)) {\n          const results = hits.map((hit) => {\n            // city value lives in default array of locale_names\n            const city = `${\n              hit['locale_names'].en\n                ? hit['locale_names'].en[0]\n                : hit['locale_names'].default[0]\n            }`\n            // state value lives in administrative array\n            const state = `${hit.administrative ? hit.administrative[0] : ''}`\n            // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\n            const country = `${\n              hit.country.en ? hit.country.en : hit.country.default\n            }`\n\n            // prettier-ignore\n            const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\n            const {lat, lng} = hit['_geoloc']\n            return {\n              cityName: cityName,\n              cityId: hit.objectID,\n              latlong: `${lat},${lng}`,\n            }\n          })\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\n          this.setState({\n            addresses: results,\n            showCaret: true,\n            showAddresses: true,\n            errorMessage: '',\n          })\n        } else {\n          this.setState({showAddresses: false})\n          this.handleError(\n            'Keine passenden Städte gefunden!'\n          )\n        }\n      } catch (error) {\n        Sentry.captureException(error)\n        this.handleError(\n          'Etwas ist schief gegangen. Bitte versuche es mit einer anderen Stadt!'\n        )\n      } finally {\n        this.setState({showLoader: false, selectedAddressIndex: 0})\n      }\n    } else {\n      this.clearState()\n    }\n  }\n\n  toggleAddresses = () => {\n    this.setState((prevState) => {\n      return {\n        showAddresses: !prevState.showAddresses,\n      }\n    })\n  }\n\n  setCity = async (address) => {\n    if (address) {\n      // set city to just have cityName excluding state and country in the search input\n      // 'Herndon, Virginia, United States' -> 'Herndon'\n      this.setState({\n        city: address.cityName.split(',')[0],\n        showAddresses: false,\n      })\n\n      this.context.updateState({\n        address: address,\n        latlong: address.latlong,\n      })\n    }\n  }\n\n  keyCodeHandler = (e) => {\n    if (e.keyCode) {\n      if (e.keyCode === 38) {\n        // up arrow\n        this.setState((prevState) => {\n          return {\n            selectedAddressIndex: Math.max(\n              0,\n              prevState.selectedAddressIndex - 1\n            ),\n          }\n        })\n        // scroll up inside the address list corresponding to up/down arrow key\n        this.listRef.current.scrollTo({\n          left: 0,\n          top:\n            this.state.selectedAddressIndex < 6\n              ? 0\n              : this.state.selectedAddressIndex * 30,\n          behavior: 'auto',\n        })\n      } else if (e.keyCode === 40) {\n        // down arrow\n        this.setState((prevState) => {\n          return {\n            selectedAddressIndex: Math.min(\n              prevState.selectedAddressIndex + 1,\n              this.state.addresses.length - 1\n            ),\n          }\n        })\n        // scroll down inside the address list corresponding to up/down arrow key\n        this.listRef.current.scrollTo({\n          left: 0,\n          top: this.state.selectedAddressIndex * 30,\n          behavior: 'auto',\n        })\n      }\n    }\n  }\n\n  clearState() {\n    this.setState({\n      showCaret: false,\n      showAddresses: false,\n      showLoader: false,\n      addresses: [],\n      selectedAddressIndex: 0,\n      errorMessage: '',\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className='flex justify-center mt-5'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            <SearchComponent\n              city={this.state.city}\n              showCaret={this.state.showCaret}\n              showAddresses={this.state.showAddresses}\n              citySearch={this.searchCity}\n              keyPressed={this.keyCodeHandler}\n              caretClicked={this.toggleAddresses}\n            />\n          </div>\n        </div>\n        <div className='flex justify-center'>\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\n            {this.state.showLoader ? (\n              <LoaderComponent />\n            ) : (\n              this.state.showAddresses && (\n                <div\n                  className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'\n                  ref={this.listRef}>\n                  {this.state.addresses.map((address, index) => {\n                    return (\n                      <AddressComponent\n                        address={address}\n                        selectedAddressIndex={this.state.selectedAddressIndex}\n                        index={index}\n                        key={index}\n                        addressSelected={() => this.setCity(address)}\n                      />\n                    )\n                  })}\n                </div>\n              )\n            )}\n            {this.state.errorMessage.length > 0 && (\n              <div className='flex justify-center'>\n                <div className='w-5/6'>\n                  <ErrorComponent\n                    errorMessage={this.state.errorMessage}\n                    showCloseBtn={true}\n                    closeError={() => {\n                      this.setState({errorMessage: ''})\n                    }}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, {Fragment, lazy, Suspense} from 'react'\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\nimport {AddressContextProvider} from '../../context/AddressContext'\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\n\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\n\nexport default () => {\n    return (\n        <Fragment>\n            <WeatherUnitContextProvider>\n                <AddressContextProvider>\n                    <AutoCompleteContainer/>\n                    <ErrorBoundaryContainer>\n                        <Suspense\n                            fallback={\n                                <LoaderComponent loaderText={'Wettervorhersage-UI wird geladen'}/>\n                            }>\n                            <WeatherContainer/>\n                            <FavoritesContainer/>\n                        </Suspense>\n                    </ErrorBoundaryContainer>\n                </AddressContextProvider>\n            </WeatherUnitContextProvider>\n        </Fragment>\n    )\n}\n","import {isEmpty, isNil} from 'lodash-es'\n\n/**\n * Check if the given value is valid or not\n * @param {*} value\n * @returns {Boolean}\n */\nconst isValid = (value) => {\n  return !isEmpty(value) && !isNil(value)\n}\n\nexport default isValid\n","import React, {useContext} from 'react'\nimport {ThemeContext} from '../../../context/ThemeContext'\nimport './ErrorStyle.scss'\n\nexport default (props) => {\n    const {theme} = useContext(ThemeContext)\n    return (\n        <div\n            className={`w-11/12 sm:w-3/4 md:w-5/6 ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\n            role='alert'>\n      <span className='w-5/6 block break-words text-sm'>\n        {props.errorMessage}\n      </span>\n            {props.showCloseBtn && (\n                <span\n                    className='absolute top-0 bottom-0 right-0 ml-3 mr-1'\n                    onClick={props.closeError}>\n          <svg\n              className='fill-current h-6 w-6 text-red-500 close-icon'\n              role='button'\n              xmlns='http://www.w3.org/2000/svg'\n              viewBox='0 0 20 20'>\n            <title>Close</title>\n            <path\n                d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z'/>\n          </svg>\n        </span>\n            )}\n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nconst WeatherUnitContext = React.createContext({\n  weatherUnit: 'C'\n})\n\nconst WeatherUnitContextProvider = ({children}) => {\n  const [weatherUnit, setWeatherUnit] = useState('C')\n\n  /**\n   * @param {String} unit (F | C)\n   * @param {String} type (selectUnit | toggle)\n   */\n  const updateWeatherUnit = unit => {\n    setWeatherUnit(unit)\n    localStorage.setItem('unit', JSON.stringify(unit))\n  }\n\n  useEffect(() => {\n    // store preferred temperature unit in localStorage\n    if (!localStorage.getItem('unit')) {\n      localStorage.setItem('unit', JSON.stringify('C'))\n    } else {\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\n    }\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\n      {children}\n    </WeatherUnitContext.Provider>\n  )\n}\n\nexport {WeatherUnitContext, WeatherUnitContextProvider}\n","import axios from 'axios'\nimport * as Sentry from '@sentry/browser'\n\nconst fetchIPAddress = async () => {\n  try {\n    const {data} = await axios.get('https://ipapi.co/json')\n    return data\n  } catch (err) {\n    Sentry.captureException(err)\n  }\n}\n\nexport default fetchIPAddress\n","import React, {Component} from 'react'\nimport {WeatherUnitContext} from './WeatherUnitContext'\nimport axios from 'axios'\nimport * as Sentry from '@sentry/browser'\nimport validName from './../utils/ValidCityName'\nimport fetchIPAddress from './../utils/FetchIPAddress'\nimport isValid from '../utils/ValidityChecker'\nimport {isNil} from 'lodash-es'\n\n// const token = process.env.REACT_APP_IPINFO_TOKEN\nconst AddressContext = React.createContext(null)\n\nclass AddressContextProvider extends Component {\n  // get weather unit\n  static contextType = WeatherUnitContext\n\n  updateState = (state) => {\n    this.setState({...state})\n  }\n\n  updateFavorites = (state) => {\n    this.setState({...state})\n  }\n  state = {\n    showLoader: true,\n    address: {\n      cityName: '',\n      cityId: '',\n    },\n    latlong: null,\n    favorites: [],\n    updateState: this.updateState,\n    updateFavorites: this.updateFavorites,\n  }\n\n  formatCoords = (latitude, longitude) => {\n    return `${latitude},${longitude}`\n  }\n\n  /**\n   * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\n   */\n  updateAddress = async (latlong) => {\n    let hit = {}\n    try {\n      const {hits} = (\n        await axios.get(`https://weather-react-api-dev.now.sh/address/coords/${latlong}`)\n      ).data\n      hit = hits[0]\n\n      if (isValid(hit)) {\n        const city = hit.city ? hit.city[0] : ''\n        const state = hit.administrative ? hit.administrative[0] : ''\n        const country = hit.country ? hit.country : ''\n        const cityName = `${validName(city)}${validName(state)}${validName(\n          country,\n          false\n        )}`\n        const cityId = hit.objectID ? hit.objectID : ''\n        this.updateState({\n          showLoader: false,\n          address: {\n            cityName,\n            cityId,\n          },\n          latlong,\n        })\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n    }\n  }\n\n  /**\n   * get ip and city info using ip-api\n   * update the address\n   */\n  getIPAddress = async () => {\n    try {\n      const data = await fetchIPAddress()\n      if (isValid(data)) {\n        const {\n          latitude,\n          longitude,\n          city,\n          region,\n          country_name,\n        } = data\n        const cityName = `${city}, ${region}, ${country_name}`\n\n        // check whether latitude and longitude are strings which are NaN as well as if value is null or undefined\n        const Latitude =\n          isNil(latitude) || isNaN(Number(latitude)) ? '00' : latitude\n        const Longitude =\n          isNil(longitude) || isNaN(Number(longitude)) ? '00' : longitude\n        this.updateState({\n          showLoader: false,\n          address: {\n            cityName,\n          },\n          latlong: this.formatCoords(Latitude, Longitude),\n        })\n      } else {\n        this.updateState({showLoader: false})\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n    }\n  }\n\n  getAddress = async () => {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const latlong = this.formatCoords(\n            position.coords.latitude,\n            position.coords.longitude\n          )\n          this.updateAddress(latlong)\n        },\n        (error) => {\n          console.error(error)\n          this.getIPAddress()\n        }\n      )\n    } else {\n      this.getIPAddress()\n    }\n  }\n\n  getFavorites = () => {\n    if (localStorage.getItem('favorites')) {\n      this.setState({\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\n      })\n    }\n  }\n\n  componentDidMount() {\n    this.getAddress()\n    // update favorites for the initial application load\n    this.getFavorites()\n  }\n\n  render() {\n    return (\n      <AddressContext.Provider value={this.state}>\n        {this.props.children}\n      </AddressContext.Provider>\n    )\n  }\n}\n\nexport {AddressContext, AddressContextProvider}\n","import React, {Component} from 'react'\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\nimport * as Sentry from '@sentry/browser'\n\nexport default class ErrorBoundaryContainer extends Component {\n  state = {\n    hasError: false,\n    eventId: null,\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {hasError: true}\n  }\n\n  componentDidCatch(error, errorInfo) {\n    Sentry.withScope((scope) => {\n      scope.setExtras(errorInfo)\n      const eventId = Sentry.captureException(error)\n      this.setState({eventId})\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.hasError ? (\n          <div className='flex'>\n            <div className='w-1/6'></div>\n            <div className='flex-col w-2/3 justify-center text-center'>\n              <ErrorComponent\n                errorMessage={'Something went wrong. Reload the page!'}\n              />\n              <button\n                className='font-semibold py-3 px-6 rounded-full capitalize text-sun'\n                onClick={() =>\n                  Sentry.showReportDialog({eventId: this.state.eventId})\n                }>\n                Report feedback\n              </button>\n            </div>\n          </div>\n        ) : (\n          this.props.children\n        )}\n      </div>\n    )\n  }\n}\n"],"sourceRoot":""}