{"version":3,"sources":["components/weather/favorite/FavoriteComponent.js","containers/favorites/FavoritesContainer.js"],"names":["favorite","favoriteSelected","index","selectedIndex","useContext","ThemeContext","theme","colorTheme","className","onClick","address","cityName","split","favorites","AddressContext","useState","selectedFavorite","setSelectedFavorite","favoriteWeather","setFavoriteWeather","isLoading","setIsLoading","slideIndex","setSlideIndex","weatherRef","useRef","favoritesLength","validCityName","isValid","includes","selectFavoriteHandler","fetchWeatherData","a","FetchWeatherData","response","state","scrollHandler","Sentry","ref","isElement","current","window","scrollTo","offsetTop","useEffect","isUndefined","find","length","timer","setInterval","clearInterval","CarouselSettings","afterSlide","map","FavoriteComponent","latlong","weatherCurrent","WeatherForecastContainer","weatherForecast","alerts","LoaderComponent","loaderText","ErrorComponent","errorMessage"],"mappings":"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","file":"static/js/8.4d6efcb9.chunk.js","sourcesContent":["import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\n\r\nexport default ({favorite, favoriteSelected, index, selectedIndex}) => {\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n    return (\r\n        <div\r\n            className={`h-16 text-${colorTheme} bg-${theme} hover:bg-${colorTheme} hover:text-${theme} border ${\r\n                index === selectedIndex\r\n                    ? 'sm:border-teal-600'\r\n                    : `sm:border-${colorTheme}`\r\n            }\r\n        } pt-5 lg:pt-1/2 font-semibold rounded-2xl cursor-pointer text-center justify-center`}\r\n            onClick={favoriteSelected}>\r\n            {favorite.address.cityName.split(', ')[0]}\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState, useContext, useEffect, useRef, Fragment} from 'react'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport FetchWeatherData from './../../utils/FetchWeatherData'\r\nimport {isUndefined, find, isElement} from 'lodash-es'\r\nimport Carousel from 'nuka-carousel'\r\nimport CarouselSettings from '../../utils/CarouselSettings'\r\nimport {ThemeContext} from '../../context/ThemeContext'\r\nimport FavoriteComponent from '../../components/weather/favorite/FavoriteComponent'\r\nimport WeatherForecastContainer from '../weather-forecast/WeatherForecastContainer'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport isValid from '../../utils/ValidityChecker'\r\n\r\nexport default () => {\r\n  const {favorites} = useContext(AddressContext)\r\n  const {theme, colorTheme} = useContext(ThemeContext)\r\n  const [selectedFavorite, setSelectedFavorite] = useState({})\r\n  const [favoriteWeather, setFavoriteWeather] = useState({})\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [slideIndex, setSlideIndex] = useState(null)\r\n  const weatherRef = useRef()\r\n\r\n  // favorites data length\r\n  const favoritesLength = useRef(0)\r\n\r\n  /**\r\n   * scroll to weather component when selectedFavorite is set\r\n   * @param {DOMElement} ref (weatherRef)\r\n   */\r\n  const scrollToRef = (ref) => {\r\n    if (isElement(ref.current)) {\r\n      window.scrollTo(0, ref.current.offsetTop)\r\n    }\r\n  }\r\n\r\n  // check whether weatherCurrent exist on selectedFavorite to show/hide weatherForecastContainer\r\n  const showWeatherForecast = () => {\r\n    return isValid(favoriteWeather.weatherCurrent)\r\n  }\r\n\r\n  // check whether the cityName is valid\r\n  const validCityName = () => {\r\n    if (isValid(selectedFavorite)) {\r\n      const cityName = selectedFavorite.address.cityName\r\n      return (\r\n        isValid(cityName) &&\r\n        !cityName.includes('') &&\r\n        !cityName.includes('null')\r\n      )\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const selectFavoriteHandler = (index) => {\r\n    if (favorites[index]) {\r\n      setSelectedFavorite({...favorites[index]})\r\n    }\r\n    setSlideIndex(index)\r\n  }\r\n\r\n  const fetchWeatherData = async () => {\r\n    if (isValid(selectedFavorite)) {\r\n      try {\r\n        setIsLoading(true)\r\n        const response = await FetchWeatherData(selectedFavorite)\r\n        // set favoriteWeather only when the data is non-empty\r\n        if (isValid(response)) {\r\n          setFavoriteWeather((state) => ({...state, ...response}))\r\n          scrollHandler()\r\n        }\r\n      } catch (err) {\r\n        Sentry.captureException(err)\r\n      } finally {\r\n        setIsLoading(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  const scrollHandler = () => {\r\n    scrollToRef(weatherRef)\r\n  }\r\n\r\n  const favoritesChecker = () => {\r\n    // check for deleted selectedFavorite scenario\r\n    // i.e. selectedFavorite is not in the favorites\r\n    // to update it with the favorite at current slideIndex\r\n    if (isValid(selectedFavorite)) {\r\n      if (\r\n        isUndefined(\r\n          find(\r\n            favorites,\r\n            (favorite) =>\r\n              favorite.address.cityName === selectedFavorite.address.cityName\r\n          )\r\n        )\r\n      ) {\r\n        selectFavoriteHandler(slideIndex)\r\n      } else {\r\n        // if favorites get updated\r\n        // i.e. a new favorite is added (favorites.length > favoritesLength)\r\n        // set selectedFavorite and slideIndex to the newly added favorite\r\n        // i.e. last favorite in favorites\r\n        if (favorites.length > favoritesLength.current) {\r\n          selectFavoriteHandler(favorites.length - 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchWeatherData()\r\n    /* important edge case scenarios checker for deleted selectedFavorite & newly added favorite */\r\n    favoritesChecker()\r\n    // update favoritesLength\r\n    favoritesLength.current = favorites.length\r\n    const timer = setInterval(() => {\r\n      fetchWeatherData()\r\n    }, 3600000)\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [selectedFavorite, favorites])\r\n\r\n  return (\r\n    <Fragment>\r\n      {favorites.length > 0 ? (\r\n        <div className={`bg-${theme} pt-5 pb-24 mb-0`}>\r\n          <p className={`text-center font-bold text-2xl text-${colorTheme}`}>\r\n            Favoriten\r\n          </p>\r\n          {/* mobile */}\r\n          <div className='sm:hidden px-5 py-5'>\r\n            <Carousel\r\n              {...CarouselSettings('favorite')}\r\n              slideIndex={slideIndex}\r\n              afterSlide={(slideIndex) => selectFavoriteHandler(slideIndex)}>\r\n              {favorites.map((favorite, index) => {\r\n                return (\r\n                  <FavoriteComponent\r\n                    key={index}\r\n                    favorite={favorite}\r\n                    index={index}\r\n                    selectedIndex={slideIndex}\r\n                    favoriteSelected={() => selectFavoriteHandler(index)}\r\n                  />\r\n                )\r\n              })}\r\n            </Carousel>\r\n          </div>\r\n          {/* tablet and above devices */}\r\n          <div className='hidden sm:flex justify-center items-center'>\r\n            <div className='sm:w-5/6 xl:max-w-6xl px-5 py-5'>\r\n              <div className='flex sm:flex-row flex-wrap justify-center'>\r\n                {favorites.map((favorite, index) => {\r\n                  return (\r\n                    <div className='m-2 sm:w-1/2 md:w-1/4' key={index}>\r\n                      <FavoriteComponent\r\n                        key={favorite.latlong}\r\n                        favorite={favorite}\r\n                        index={index}\r\n                        selectedIndex={slideIndex}\r\n                        favoriteSelected={() => selectFavoriteHandler(index)}\r\n                      />\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/*\r\n            TODO: utilize weather container here instead of code repeat\r\n          */}\r\n          <div ref={weatherRef}>\r\n            {showWeatherForecast() ? (\r\n              <WeatherForecastContainer\r\n                weatherCurrent={favoriteWeather.weatherCurrent}\r\n                weatherForecast={favoriteWeather.weatherForecast}\r\n                alerts={favoriteWeather.alerts}\r\n                address={selectedFavorite.address}\r\n                latlong={selectedFavorite.latlong}\r\n              />\r\n            ) : (\r\n              <Fragment>\r\n                {isLoading ? (\r\n                  <LoaderComponent\r\n                    loaderText={`Fetching weather forecast ${\r\n                      validCityName()\r\n                        ? `for ${selectedFavorite.address.cityName}`\r\n                        : ''\r\n                    } 😎`}\r\n                  />\r\n                ) : (\r\n                  <div>\r\n                    {validCityName() ? (\r\n                      // show error component only when selectedFavorite cityName is valid\r\n                      // since by default on component load, selectedFavorite is empty\r\n                      // this extra check will hide error and show only when api call fetch fail for selectedFavorite\r\n                      <div className='flex justify-center'>\r\n                        <div className='sm:w-full lg:w-2/3 xl:w-1/2'>\r\n                          <ErrorComponent\r\n                            errorMessage={`Etwas ist schief gelaufen. Wettervorhersage konnte nicht abgerufen werden ${\r\n                              validCityName()\r\n                                ? `for ${selectedFavorite.address.cityName}`\r\n                                : ''\r\n                            }! 😢`}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div>\r\n                )}\r\n              </Fragment>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </Fragment>\r\n  )\r\n}\r\n"],"sourceRoot":""}