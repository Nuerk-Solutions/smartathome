{"version":3,"sources":["utils/ValidityChecker.js","components/weather/error/ErrorComponent.js","context/WeatherUnitContext.js","utils/FetchIPAddress.js","context/AddressContext.js","containers/error-boundary/ErrorBoundaryContainer.js","utils/ValidCityName.js","components/weather/address/AddressComponent.js","components/weather/search/SearchComponent.js","containers/autocomplete/AutoCompleteContainer.js","containers/home/HomeContainer.js"],"names":["isValid","value","isEmpty","isNil","props","theme","useContext","ThemeContext","className","role","errorMessage","showCloseBtn","onClick","closeError","xmlns","viewBox","d","WeatherUnitContext","React","createContext","weatherUnit","WeatherUnitContextProvider","children","useState","setWeatherUnit","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","Provider","updateWeatherUnit","unit","fetchIPAddress","a","axios","get","data","Sentry","AddressContext","AddressContextProvider","updateState","state","setState","updateFavorites","showLoader","address","cityName","cityId","latlong","favorites","formatCoords","latitude","longitude","updateAddress","hit","features","place_name_de","id","getIPAddress","city","region","country_name","Latitude","isNaN","Number","Longitude","getAddress","navigator","geolocation","getCurrentPosition","position","coords","error","console","getFavorites","this","Component","contextType","ErrorBoundaryContainer","hasError","eventId","errorInfo","scope","setExtras","selectedAddressIndex","index","addressSelected","colorTheme","IconComponent","type","color","TYPES","search","up","down","style","backgroundColor","letterSpacing","placeholder","onChange","citySearch","onKeyDown","keyPressed","tabIndex","showCaret","caretClicked","showAddresses","axiosRetry","retryDelay","exponentialDelay","AutoCompleteContainer","listRef","createRef","undefined","addresses","scrollOffset","debounceAddress","debounce","getAddresses","searchCity","event","target","toggleAddresses","prevState","setCity","split","context","keyCodeHandler","e","keyCode","Math","max","current","scrollTo","left","top","behavior","min","length","message","trim","results","map","lng","geometry","coordinates","lat","objectID","handleError","clearState","SearchComponent","LoaderComponent","ref","AddressComponent","ErrorComponent","WeatherContainer","lazy","FavoritesContainer","fallback","loaderText"],"mappings":"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","file":"static/js/6.4e7a7085.chunk.js","sourcesContent":["import {isEmpty, isNil} from 'lodash-es'\r\n\r\n/**\r\n * Check if the given value is valid or not\r\n * @param {*} value\r\n * @returns {Boolean}\r\n */\r\nconst isValid = (value) => {\r\n  return !isEmpty(value) && !isNil(value)\r\n}\r\n\r\nexport default isValid\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\nimport './ErrorStyle.scss'\r\n\r\nexport default (props) => {\r\n    const {theme} = useContext(ThemeContext)\r\n    return (\r\n        <div\r\n            className={`w-11/12 sm:w-3/4 md:w-5/6 ml-auto mr-auto h-auto bg-${theme} border border-red-400 text-red-700 mt-5 px-4 py-2 rounded relative`}\r\n            role='alert'>\r\n      <span className='w-5/6 block break-words text-sm'>\r\n        {props.errorMessage}\r\n      </span>\r\n            {props.showCloseBtn && (\r\n                <span\r\n                    className='absolute top-0 bottom-0 right-0 ml-3 mr-1'\r\n                    onClick={props.closeError}>\r\n          <svg\r\n              className='fill-current h-6 w-6 text-red-500 close-icon'\r\n              role='button'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n              viewBox='0 0 20 20'>\r\n            <title>Close</title>\r\n            <path\r\n                d='M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z'/>\r\n          </svg>\r\n        </span>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from 'react'\r\nconst WeatherUnitContext = React.createContext({\r\n  weatherUnit: 'C'\r\n})\r\n\r\nconst WeatherUnitContextProvider = ({children}) => {\r\n  const [weatherUnit, setWeatherUnit] = useState('C')\r\n\r\n  /**\r\n   * @param {String} unit (F | C)\r\n   * @param {String} type (selectUnit | toggle)\r\n   */\r\n  const updateWeatherUnit = unit => {\r\n    setWeatherUnit(unit)\r\n    localStorage.setItem('unit', JSON.stringify(unit))\r\n  }\r\n\r\n  useEffect(() => {\r\n    // store preferred temperature unit in localStorage\r\n    if (!localStorage.getItem('unit')) {\r\n      localStorage.setItem('unit', JSON.stringify('C'))\r\n    } else {\r\n      setWeatherUnit(JSON.parse(localStorage.getItem('unit')))\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <WeatherUnitContext.Provider value={{weatherUnit, updateWeatherUnit}}>\r\n      {children}\r\n    </WeatherUnitContext.Provider>\r\n  )\r\n}\r\n\r\nexport {WeatherUnitContext, WeatherUnitContextProvider}\r\n","import axios from 'axios'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nconst fetchIPAddress = async () => {\r\n  try {\r\n    const {data} = await axios.get('https://ipapi.co/json')\r\n    return data\r\n  } catch (err) {\r\n    Sentry.captureException(err)\r\n  }\r\n}\r\n\r\nexport default fetchIPAddress\r\n","import React, {Component} from 'react'\r\nimport {WeatherUnitContext} from './WeatherUnitContext'\r\nimport axios from 'axios'\r\nimport * as Sentry from '@sentry/browser'\r\nimport validName from './../utils/ValidCityName'\r\nimport fetchIPAddress from './../utils/FetchIPAddress'\r\nimport isValid from '../utils/ValidityChecker'\r\nimport {isNil} from 'lodash-es'\r\n\r\n// const token = process.env.REACT_APP_IPINFO_TOKEN\r\nconst AddressContext = React.createContext(null)\r\n\r\nclass AddressContextProvider extends Component {\r\n  // get weather unit\r\n  static contextType = WeatherUnitContext\r\n\r\n  updateState = (state) => {\r\n    this.setState({...state})\r\n  }\r\n\r\n  updateFavorites = (state) => {\r\n    this.setState({...state})\r\n  }\r\n  state = {\r\n    showLoader: true,\r\n    address: {\r\n      cityName: '',\r\n      cityId: '',\r\n    },\r\n    latlong: null,\r\n    favorites: [],\r\n    updateState: this.updateState,\r\n    updateFavorites: this.updateFavorites,\r\n  }\r\n\r\n  formatCoords = (latitude, longitude) => {\r\n    // return `${latitude},${longitude}`\r\n    return `${longitude},${latitude}`\r\n  }\r\n\r\n  /**\r\n   * update address using reverse geocoding of Algolia PLaces to obtain city, state, country, cityID\r\n   */\r\n  updateAddress = async (latlong) => {\r\n    let hit = {}\r\n    try {\r\n      const {features} = (\r\n        // await axios.get(`https://weather-react-api-dev.now.sh/address/coords/${latlong}`)\r\n          await axios.get(`https://api.mapbox.com/geocoding/v5/mapbox.places/${latlong}.json?access_token=pk.eyJ1IjoiZGVyZWNoMWUiLCJhIjoiY2t0NjA1MWEyMGRzZjJwanB1NzkxdnhoMiJ9.XCZgdSBLLFhVMn2ZEH7rDQ&language=de`)\r\n      ).data\r\n      hit = features[0]\r\n\r\n      if (isValid(hit)) {\r\n        // const city = hit.city ? hit.city[0] : ''\r\n        // const state = hit.administrative ? hit.administrative[0] : ''\r\n        // const country = hit.country ? hit.country : ''\r\n        // const cityName = `${validName(city)}${validName(state)}${validName(\r\n        //   country,\r\n        //   false\r\n        // )}`\r\n        const cityName = hit.place_name_de;\r\n        const cityId = hit.id ? hit.id : ''\r\n        this.updateState({\r\n          showLoader: false,\r\n          address: {\r\n            cityName,\r\n            cityId,\r\n          },\r\n          latlong,\r\n        })\r\n      }\r\n    } catch (error) {\r\n      Sentry.captureException(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get ip and city info using ip-api\r\n   * update the address\r\n   */\r\n  getIPAddress = async () => {\r\n    try {\r\n      const data = await fetchIPAddress()\r\n      if (isValid(data)) {\r\n        const {\r\n          latitude,\r\n          longitude,\r\n          city,\r\n          region,\r\n          country_name,\r\n        } = data\r\n        const cityName = `${city}, ${region}, ${country_name}`\r\n\r\n        // check whether latitude and longitude are strings which are NaN as well as if value is null or undefined\r\n        const Latitude =\r\n          isNil(latitude) || isNaN(Number(latitude)) ? '00' : latitude\r\n        const Longitude =\r\n          isNil(longitude) || isNaN(Number(longitude)) ? '00' : longitude\r\n        this.updateState({\r\n          showLoader: false,\r\n          address: {\r\n            cityName,\r\n          },\r\n          latlong: this.formatCoords(Longitude, Latitude),\r\n        })\r\n      } else {\r\n        this.updateState({showLoader: false})\r\n      }\r\n    } catch (error) {\r\n      Sentry.captureException(error)\r\n    }\r\n  }\r\n\r\n  getAddress = async () => {\r\n    if ('geolocation' in navigator) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        async (position) => {\r\n          const latlong = this.formatCoords(\r\n            position.coords.latitude,\r\n            position.coords.longitude\r\n          )\r\n          this.updateAddress(latlong)\r\n        },\r\n        (error) => {\r\n          console.error(error)\r\n          this.getIPAddress()\r\n        }\r\n      )\r\n    } else {\r\n      this.getIPAddress()\r\n    }\r\n  }\r\n\r\n  getFavorites = () => {\r\n    if (localStorage.getItem('favorites')) {\r\n      this.setState({\r\n        favorites: [...JSON.parse(localStorage.getItem('favorites'))],\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAddress()\r\n    // update favorites for the initial application load\r\n    this.getFavorites()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AddressContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </AddressContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport {AddressContext, AddressContextProvider}\r\n","import React, {Component} from 'react'\r\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\r\nimport * as Sentry from '@sentry/browser'\r\n\r\nexport default class ErrorBoundaryContainer extends Component {\r\n  state = {\r\n    hasError: false,\r\n    eventId: null,\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return {hasError: true}\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    Sentry.withScope((scope) => {\r\n      scope.setExtras(errorInfo)\r\n      const eventId = Sentry.captureException(error)\r\n      this.setState({eventId})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.hasError ? (\r\n          <div className='flex'>\r\n            <div className='w-1/6'/>\r\n            <div className='flex-col w-2/3 justify-center text-center'>\r\n              <ErrorComponent\r\n                errorMessage={'Etwas ist schief gelaufen. Seite aktualisieren!'}\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          this.props.children\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import isValid from './ValidityChecker'\r\n\r\n/**\r\n * util func to check and return the valid name\r\n * @param {*} name (city or state or country)\r\n * @param {*} showDelimeter (false for country)\r\n */\r\nconst validName = (name, showDelimeter = true) => {\r\n  return isValid(name) ? `${name}${showDelimeter ? ', ' : ''}` : ''\r\n}\r\n\r\nexport default validName\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\n\r\nexport default ({address, selectedAddressIndex, index, addressSelected}) => {\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n    return (\r\n        <p\r\n            className={`px-5 py-1 cursor-pointer item hover:text-${theme} hover:bg-${colorTheme} ${\r\n                index === selectedAddressIndex\r\n                    ? `text-${theme} bg-${colorTheme}`\r\n                    : `text-${colorTheme}`\r\n            }`}\r\n            onClick={addressSelected}>\r\n            {address.cityName}\r\n        </p>\r\n    )\r\n}\r\n","import React, {useContext} from 'react'\r\nimport {ThemeContext} from '../../../context/ThemeContext'\r\nimport {FiSearch} from 'react-icons/fi'\r\nimport {IoIosArrowDown, IoIosArrowUp} from 'react-icons/io'\r\n\r\nconst IconComponent = ({type, color}) => {\r\n    const TYPES = {\r\n        search: <FiSearch/>,\r\n        up: <IoIosArrowUp/>,\r\n        down: <IoIosArrowDown/>,\r\n    }\r\n    return <p className={`opacity-75 text-2xl fill-${color}`}>{TYPES[type]}</p>\r\n}\r\n\r\nexport default (props) => {\r\n    const {theme, colorTheme} = useContext(ThemeContext)\r\n\r\n    return (\r\n        <div className='h-12 mx-5 mt-5'>\r\n            <div className='relative'>\r\n                <div className='absolute top-0 left-0 ml-5 mt-3'>\r\n                    <IconComponent type='search' color={colorTheme}/>\r\n                </div>\r\n                <input\r\n                    style={{\r\n                        backgroundColor: `${theme === 'dark' ? '#3a3a3a' : '#e2e8f0'}`,\r\n                        letterSpacing: '0.05em',\r\n                    }}\r\n                    className={`data-hj-whitelist block appearance-none w-full border-none rounded-full shadow py-3 pl-12 pr-6 mb-3 leading-tight focus:outline-none focus:bg-gray-200 truncate placeholder-gray-500 text-${colorTheme}`}\r\n                    id='grid-first-name'\r\n                    type='text'\r\n                    placeholder='Stadtname oder PLZ eingeben'\r\n                    onChange={props.citySearch}\r\n                    onKeyDown={props.keyPressed}\r\n                    tabIndex='0'\r\n                    value={props.city}\r\n                />\r\n                {props.showCaret ? (\r\n                    <div\r\n                        className='flex right-0 absolute top-0 mr-4 mt-3 cursor-pointer'\r\n                        onClick={props.caretClicked}>\r\n                        {props.showAddresses ? (<IconComponent type='up' color={colorTheme}/>) :\r\n                            (<IconComponent type='down' color={colorTheme}/>)}\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component, Fragment} from 'react'\r\nimport axios from 'axios'\r\nimport axiosRetry from 'axios-retry'\r\nimport './AutoCompleteStyle.scss'\r\nimport AddressComponent from '../../components/weather/address/AddressComponent.js'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\r\nimport {AddressContext} from '../../context/AddressContext'\r\nimport SearchComponent from '../../components/weather/search/SearchComponent'\r\nimport * as Sentry from '@sentry/browser'\r\nimport validName from '../../utils/ValidCityName'\r\nimport isValid from '../../utils/ValidityChecker'\r\nimport {debounce, isNil} from 'lodash-es'\r\n\r\n// Exponential back-off retry delay between requests\r\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\r\n\r\nexport default class AutoCompleteContainer extends Component {\r\n  static contextType = AddressContext\r\n  listRef = React.createRef(undefined)\r\n  state = {\r\n    showCaret: false,\r\n    showAddresses: false,\r\n    showLoader: false,\r\n    city: '',\r\n    addresses: [],\r\n    selectedAddressIndex: 0,\r\n    scrollOffset: 0,\r\n    errorMessage: '',\r\n  }\r\n\r\n  handleError(message) {\r\n    this.setState({errorMessage: message})\r\n  }\r\n\r\n  // debounced function\r\n  debounceAddress = debounce(this.getAddresses, 1000)\r\n\r\n  searchCity = (event) => {\r\n    this.setState({city: event.target.value, errorMessage: ''})\r\n    this.debounceAddress()\r\n  }\r\n\r\n  // fetch valid matched addresses for searched city\r\n  async getAddresses() {\r\n    // check for empty city value since deleting city value character by character will trigger the debounceAddress\r\n    // city value could be empty when this function run\r\n    // so this extra check will fix the bug of showing addresses list when there is no city name\r\n    if (this.state.city.trim()) {\r\n      try {\r\n        this.setState({showLoader: true})\r\n        // the below latlong check is just a workaround for accessing correct api route\r\n        // otherwise, no matter how good the city name is, when latlong is empty user will get 404 since there is no route without latlong on the api server\r\n        const latlong =\r\n          !isNil(this.context.latlong) && !isNaN(Number(this.context.latlong))\r\n            ? this.context.latlong\r\n            : '00,00'\r\n\r\n        const {features} = (\r\n          await axios.get(\r\n            // `https://weather-react-api-dev.now.sh/places/query/${this.state.city}/${latlong}`\r\n              `https://api.mapbox.com/geocoding/v5/mapbox.places/${this.state.city}.json?access_token=pk.eyJ1IjoiZGVyZWNoMWUiLCJhIjoiY2t0NjA1MWEyMGRzZjJwanB1NzkxdnhoMiJ9.XCZgdSBLLFhVMn2ZEH7rDQ&language=de`\r\n          )\r\n        ).data\r\n\r\n        // populate addresses and show them if matching cities exist\r\n        if (isValid(features)) {\r\n          const results = features.map((hit) => {\r\n            // // city value lives in default array of locale_names\r\n            // const city = hit.context[hit.context.length >= 3 ? hit.context.length - 3 : 0].text\r\n            // // state value lives in administrative array\r\n            // const state = hit.context[hit.context.length >= 3 ? hit.context.length - 2 : 1].text\r\n            // // country value lives in country object in different languages and gran the \"en\" version if available or else the default version\r\n            // const country = hit.context.length < 3 ? '' : hit.context[hit.context.length >= 3 ? hit.context.length - 1 : 2].text\r\n            //\r\n            // // prettier-ignore\r\n            // const cityName = `${validName(city)}${validName(state)}${validName(country, false)}`\r\n            const cityName = hit.place_name_de\r\n            const lng = hit.geometry.coordinates[0];\r\n            const lat = hit.geometry.coordinates[1];\r\n            return {\r\n              cityName: cityName,\r\n              cityId: hit.objectID,\r\n              latlong: `${lng},${lat}`,\r\n            }\r\n          })\r\n          // results is an array of `address` objects with cityName, objectID, and latlong properties\r\n          this.setState({\r\n            addresses: results,\r\n            showCaret: true,\r\n            showAddresses: true,\r\n            errorMessage: '',\r\n          })\r\n        } else {\r\n          this.setState({showAddresses: false})\r\n          this.handleError(\r\n            'Keine passenden Städte gefunden!'\r\n          )\r\n        }\r\n      } catch (error) {\r\n        Sentry.captureException(error)\r\n        this.handleError(\r\n          'Etwas ist schief gegangen. Bitte versuche es mit einer anderen Stadt!'\r\n        )\r\n      } finally {\r\n        this.setState({showLoader: false, selectedAddressIndex: 0})\r\n      }\r\n    } else {\r\n      this.clearState()\r\n    }\r\n  }\r\n\r\n  toggleAddresses = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        showAddresses: !prevState.showAddresses,\r\n      }\r\n    })\r\n  }\r\n\r\n  setCity = async (address) => {\r\n    if (address) {\r\n      // set city to just have cityName excluding state and country in the search input\r\n      // 'Herndon, Virginia, United States' -> 'Herndon'\r\n      this.setState({\r\n        city: address.cityName.split(',')[0],\r\n        showAddresses: false,\r\n      })\r\n\r\n      this.context.updateState({\r\n        address: address,\r\n        latlong: address.latlong,\r\n      })\r\n    }\r\n  }\r\n\r\n  keyCodeHandler = (e) => {\r\n    if (e.keyCode) {\r\n      if (e.keyCode === 38) {\r\n        // up arrow\r\n        this.setState((prevState) => {\r\n          return {\r\n            selectedAddressIndex: Math.max(\r\n              0,\r\n              prevState.selectedAddressIndex - 1\r\n            ),\r\n          }\r\n        })\r\n        // scroll up inside the address list corresponding to up/down arrow key\r\n        this.listRef.current.scrollTo({\r\n          left: 0,\r\n          top:\r\n            this.state.selectedAddressIndex < 6\r\n              ? 0\r\n              : this.state.selectedAddressIndex * 30,\r\n          behavior: 'auto',\r\n        })\r\n      } else if (e.keyCode === 40) {\r\n        // down arrow\r\n        this.setState((prevState) => {\r\n          return {\r\n            selectedAddressIndex: Math.min(\r\n              prevState.selectedAddressIndex + 1,\r\n              this.state.addresses.length - 1\r\n            ),\r\n          }\r\n        })\r\n        // scroll down inside the address list corresponding to up/down arrow key\r\n        this.listRef.current.scrollTo({\r\n          left: 0,\r\n          top: this.state.selectedAddressIndex * 30,\r\n          behavior: 'auto',\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  clearState() {\r\n    this.setState({\r\n      showCaret: false,\r\n      showAddresses: false,\r\n      showLoader: false,\r\n      addresses: [],\r\n      selectedAddressIndex: 0,\r\n      errorMessage: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className='flex justify-center mt-5'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            <SearchComponent\r\n              city={this.state.city}\r\n              showCaret={this.state.showCaret}\r\n              showAddresses={this.state.showAddresses}\r\n              citySearch={this.searchCity}\r\n              keyPressed={this.keyCodeHandler}\r\n              caretClicked={this.toggleAddresses}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className='flex justify-center'>\r\n          <div className='w-full sm:w-5/6 md:w-2/3 xl:max-w-5xl'>\r\n            {this.state.showLoader ? (\r\n              <LoaderComponent />\r\n            ) : (\r\n              this.state.showAddresses && (\r\n                <div\r\n                  className='mx-10 mt-0 border-solid border-2 border-gray-400 rounded-b-xl address-list'\r\n                  ref={this.listRef}>\r\n                  {this.state.addresses.map((address, index) => {\r\n                    return (\r\n                      <AddressComponent\r\n                        address={address}\r\n                        selectedAddressIndex={this.state.selectedAddressIndex}\r\n                        index={index}\r\n                        key={index}\r\n                        addressSelected={() => this.setCity(address)}\r\n                      />\r\n                    )\r\n                  })}\r\n                </div>\r\n              )\r\n            )}\r\n            {this.state.errorMessage.length > 0 && (\r\n              <div className='flex justify-center'>\r\n                <div className='w-5/6'>\r\n                  <ErrorComponent\r\n                    errorMessage={this.state.errorMessage}\r\n                    showCloseBtn={true}\r\n                    closeError={() => {\r\n                      this.setState({errorMessage: ''})\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, {Fragment, lazy, Suspense} from 'react'\r\nimport AutoCompleteContainer from '../autocomplete/AutoCompleteContainer'\r\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\r\nimport {AddressContextProvider} from '../../context/AddressContext'\r\nimport {WeatherUnitContextProvider} from '../../context/WeatherUnitContext'\r\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\r\n\r\nconst WeatherContainer = lazy(() => import('./../weather/WeatherContainer'))\r\nconst FavoritesContainer = lazy(() => import('../favorites/FavoritesContainer'))\r\n\r\nexport default () => {\r\n    return (\r\n        <Fragment>\r\n            <WeatherUnitContextProvider>\r\n                <AddressContextProvider>\r\n                    <AutoCompleteContainer/>\r\n                    <ErrorBoundaryContainer>\r\n                        <Suspense\r\n                            fallback={\r\n                                <LoaderComponent loaderText={'Wettervorhersage-UI wird geladen'}/>\r\n                            }>\r\n                            <WeatherContainer/>\r\n                            <FavoritesContainer/>\r\n                        </Suspense>\r\n                    </ErrorBoundaryContainer>\r\n                </AddressContextProvider>\r\n            </WeatherUnitContextProvider>\r\n        </Fragment>\r\n    )\r\n}\r\n"],"sourceRoot":""}