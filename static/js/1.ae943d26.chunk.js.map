{"version":3,"sources":["utils/FetchWeatherData.js","utils/CarouselSettings.js","utils/WeatherBackground.js","components/weather/weather/InfoComponent.js","utils/WindDirection.js","utils/WeatherIcon.js","utils/SpeedConvert.js","utils/TemperatureConvert.js","components/weather/weather/WeatherIconComponent.js","components/weather/weather/InfoDetailComponent.js","containers/current-weather/CurrentWeatherContainer.js","components/weather/weather/DayComponent.js","components/weather/weather/TimeframeComponent.js","containers/forecast/ForecastContainer.js","components/weather/weather/AlertComponent.js","containers/weather-forecast/WeatherForecastContainer.js","utils/FormatTime.js"],"names":["axiosRetry","axios","retryDelay","exponentialDelay","getURL","latlong","args","split","FetchWeatherData","a","weatherCurrent","weatherForecast","alerts","error","isValid","get","weatherData","data","timezone","current","sunrise","daily","sunset","timeFrames","hourly","forEach","hour","date","FormatTime","dt","Object","keys","includes","push","days","day","alert","Sentry","CarouselSettings","type","resolution","width","slidesToShow","slidesToScroll","initialSlideHeight","slideWidth","speed","easing","defaultControlsConfig","prevButtonStyle","display","nextButtonStyle","pagingDotsStyle","fill","position","top","margin","formatTime","time","moment","tz","format","isDawnDusk","currentTime","currentHour","timeHour","Number","getWeatherBackground","weather","icon","id","sunriseTime","sunsetTime","currentMinutes","sunriseHour","sunriseMinutes","sunsetHour","sunsetMinutes","getType","dawn","dusk","address","updateFavorites","useContext","AddressContext","useState","setDate","setTime","formattedDateTimeRef","useRef","isBookmarked","localStorage","getItem","JSON","parse","filter","favorite","cityName","length","datetimeSetter","dateObj","isUndefined","useEffect","dateTimer","setInterval","formattedDateTimeObj","add","clearInterval","className","isEmpty","title","onClick","favorites","duplicates","removeIndex","findIndex","newFavorites","splice","setItem","stringify","updatedFavorites","getWindDirection","deg","getWeatherIcon","cToF","temp","Math","round","up","right","down","left","WeatherUnitContext","weatherUnit","updateWeatherUnit","computedTempValue","startsWith","description","WeatherIconComponent","src","alt","humidity","wind_speed","computedSpeedValue","wind_deg","ErrorBoundaryContainer","InfoComponent","InfoDetailComponent","LoaderComponent","props","index","selectedIndex","ThemeContext","theme","colorTheme","night","selectedDay","Date","toLocaleString","weekday","Timeframe","setSelectedDay","selectedDayIndex","setSelectedDayIndex","updateSelectedDay","today","selectedDayIndexHandler","indexOf","ErrorComponent","errorMessage","showCloseBtn","loaderText","map","TimeframeComponent","DayComponent","daySelectHandler","event","start","end","sender_name","startTime","endTime","role","imageBorder","borderTopLeftRadius","borderTopRightRadius","showAlerts","setShowAlerts","style","background","CurrentWeatherContainer","ForecastContainer","AlertComponent","timestamp","formatType"],"mappings":"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","file":"static/js/1.ae943d26.chunk.js","sourcesContent":["import axios from 'axios'\nimport axiosRetry from 'axios-retry'\nimport FormatTime from './FormatTime'\nimport * as Sentry from '@sentry/browser'\nimport isValid from './ValidityChecker'\n\n// Exponential back-off retry delay between requests\naxiosRetry(axios, {retryDelay: axiosRetry.exponentialDelay})\n\nconst getURL = (latlong) => {\n  const args = latlong.split(\",\");\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=${args[0]}&lon=${args[1]}&exclude=minutely,flags&lang=de&units=metric&cnt=7&appid=992c820be22089cd7521bb068ba020c2`\n  // return `${API_URL}/forecast/coords/${latlong}?extend=hourly&exclude=minutely,flags`\n}\n\n/**\n * @param {String} latlong (-43.53333,172.63333)\n */\nconst FetchWeatherData = async ({latlong}) => {\n  let weatherCurrent = {}\n  let weatherForecast = {}\n  let alerts = []\n  let error = null\n\n  // fetch weather data only when latlong is valid to avoid uneccessary API calls\n  if (isValid(latlong)) {\n    try {\n      const weatherData = (await axios.get(getURL(latlong))).data\n      if (isValid(weatherData)) {\n        // NOTE: add timezone property to current, days, and timeFrame data to use it later for\n        // displaying weatherIcon with day or night variants specific to location timezone\n        // parsing sunriseTime & sunsetTime according to the timezone\n        const timezone = weatherData.timezone\n\n        weatherCurrent = {\n          timezone,\n          ...weatherData.current,\n          sunrise: weatherData.daily[0].sunrise,\n          sunset: weatherData.daily[0].sunset,\n        }\n\n        // group 168 hours into days as keys in timeFrames\n        // group days and timeFrames into weatherForecast\n        const timeFrames = {}\n        // create date as the keys for timeFrame in timeFrames\n        // i.e timeFrames: {'02/28/2020': [{...timeFrame},...], ...}\n        weatherData.hourly.forEach((hour) => {\n          const date = FormatTime(hour.dt, timezone, 'MM/DD/YYYY')\n          if (Object.keys(timeFrames).includes(date)) {\n            timeFrames[date].push({timezone, ...hour})\n          } else {\n            timeFrames[date] = [{timezone, ...hour}]\n          }\n        })\n        const days = {}\n        // create date as the keys for the day in days\n        // i.e days: {'02/28/2020': {...day}, ...}\n        weatherData.daily.forEach((day) => {\n          const date = FormatTime(day.dt, timezone, 'MM/DD/YYYY')\n          // since there will be unique day objects in days\n          // just create a 'date' key with day object as value for as many days\n          days[date] = {timezone, ...day}\n        })\n\n        weatherForecast = {timeFrames, days}\n\n        if (isValid(weatherData.alerts)) {\n          weatherData.alerts.forEach((alert) => {\n            alerts.push({\n              timezone,\n              ...alert,\n            })\n          })\n        }\n      }\n    } catch (err) {\n      error = err\n      Sentry.captureException(err)\n    }\n  }\n\n  return {\n    weatherCurrent,\n    weatherForecast,\n    alerts,\n    error,\n  }\n}\n\nexport default FetchWeatherData\n","// modify carousel settings for timeframe and favorites component\n/**\n * time or favorite\n * @param {String} type\n * resolution can be mobile or tablet\n * @param {*} resolution\n */\nconst CarouselSettings = (type, resolution = 'mobile') => ({\n  width: '100%',\n  slidesToShow: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  slidesToScroll: type === 'time' ? (resolution === 'tablet' ? 8 : 3) : 1,\n  initialSlideHeight: type === 'time' ? 100 : 200,\n  slideWidth: type === 'time' ? (resolution === 'tablet' ? 1.0 : 0.95) : 1.0,\n  speed: 1000,\n  easing: 'easeSinInOut',\n  defaultControlsConfig: {\n    prevButtonStyle: {\n      display: 'none',\n    },\n    nextButtonStyle: {\n      display: 'none',\n    },\n    pagingDotsStyle: {\n      fill: '#cfd9df',\n      display: 'flex',\n      position: 'relative',\n      top: type === 'day' ? '25px' : '35px',\n      margin: '10px 5px',\n    },\n  },\n})\n\nexport default CarouselSettings\n","import moment from 'moment-timezone'\n\n/**\n * format timestamp to time in the form of \"H:mm\" where H -> 0 - 23 & mm -> 00 - 59\n * @param {String} type (sunrise | sunset | hour)\n * @param {Number} time (sunriseTime, sunsetTime, 0 in case of hour)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst formatTime = (type, time, timezone) => {\n  if (type === 'sunrise' || type === 'sunset') {\n    return moment(time * 1000)\n      .tz(timezone)\n      .format('H:mm')\n  }\n  return moment().tz(timezone).format('H:mm')\n}\n\n/**\n * returns day or night based on the comparison of currentTime with sunrise and sunset times\n * @param {String} currentTime\n * @param {String} sunriseTime\n * @param {String} sunsetTime\n */\nconst getType = (currentTime, sunriseTime, sunsetTime) => {\n  const [currentHour, currentMinutes] = currentTime.split(':')\n  const [sunriseHour, sunriseMinutes] = sunriseTime.split(':')\n  const [sunsetHour, sunsetMinutes] = sunsetTime.split(':')\n  if (currentHour === sunriseHour || currentHour === sunsetHour) {\n    return Number(currentMinutes) >= Number(sunriseMinutes) ||\n      Number(currentMinutes) < Number(sunsetMinutes)\n      ? 'day'\n      : 'night'\n  } else {\n    return Number(currentHour) > Number(sunriseHour) &&\n      Number(currentHour) < Number(sunsetHour)\n      ? 'day'\n      : 'night'\n  }\n}\n\n/**\n * checks if it is dawn (sunrise) or dusk (sunset)\n * @param {*} currentTime\n * @param {*} time (sunriseTime for checking dawn & sunsetTime for checking dusk)\n */\nconst isDawnDusk = (currentTime, time) => {\n  const currentHour = currentTime.split(':')[0]\n  const timeHour = time.split(':')[0]\n  return (\n    Number(currentHour) === Number(timeHour) - 1 ||\n    Number(currentHour) === Number(timeHour)\n  )\n}\n\n/**\n * @param {Object} data (weatherCurrent)\n * @param {String} icon (ex- cloudy)\n * @param {String} timezone (ex- Pacific/Auckland)\n */\nconst getWeatherBackground = (data) => {\n  const {timezone, sunrise, sunset} = data\n  const {icon, id} = data.weather[0];\n  // format sunrise and sunset in weatherCurrent of data into hour and minutes\n  const sunriseTime = formatTime('sunrise', sunrise, timezone)\n  const sunsetTime = formatTime('sunset', sunset, timezone)\n  const currentTime = formatTime('hour', 0, timezone)\n  // get the type like day or night\n  const type = getType(currentTime, sunriseTime, sunsetTime)\n  // check for dawn scenario before sunrise hour\n  const dawn = isDawnDusk(currentTime, sunriseTime)\n  // check for dusk scenario before sunset hour\n  const dusk = isDawnDusk(currentTime, sunsetTime)\n\n  if (icon) {\n    switch (icon) {\n      case '01d':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-day'\n      case '01n':\n        return dusk ? 'dusk' : dawn ? 'dawn' : 'clear-night'\n      case '10d':  case '09d': case '13d':\n        return `overcast-${type}`\n      case 'wind':\n        return `cloudy-${type}`\n      case '04d': case '04n':\n        return `cloudy-${type}`\n      case '02d': case '03d':\n        return `cloudy-${type}`\n      case '02n': case '03n':\n        return `cloudy-${type}`\n      case '11d':\n        return 'thunderstorm'\n      case '50d':\n        if (id === 781) {\n          return 'tornado'\n        }\n        return `cloudy-${type}`\n      default:\n        return 'clear-day'\n    }\n  }\n  return 'clear-day'\n}\n\nexport default getWeatherBackground\n","import React, {Fragment, useContext, useEffect, useRef, useState} from 'react'\nimport {AddressContext} from '../../../context/AddressContext'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport moment from 'moment-timezone'\nimport {FaHeart, FaRegHeart} from 'react-icons/fa'\n\nexport default ({address, latlong, weatherCurrent}) => {\n    const {updateFavorites} = useContext(AddressContext)\n    const [date, setDate] = useState('')\n    const [time, setTime] = useState('')\n\n    // store formattedDateTime moment date object in the ref and update it for the first api call fetch\n    // this ref will be used to update date and time every second without making additional api calls\n    const formattedDateTimeRef = useRef()\n\n    const isBookmarked = () => {\n        if (localStorage.getItem('favorites')) {\n            const favorites = JSON.parse(localStorage.getItem('favorites'))\n            const matched = favorites.filter(\n                (favorite) => favorite.address.cityName === address.cityName\n            )\n            return matched.length > 0\n        }\n        return false\n    }\n\n    const favoritesHandler = () => {\n        // first ever favorite item stored in localStorage\n        if (!localStorage.getItem('favorites')) {\n            localStorage.setItem('favorites', JSON.stringify([{address, latlong}]))\n            updateFavorites({\n                favorites: [{address, latlong}],\n            })\n        } else {\n            const favorites = JSON.parse(localStorage.getItem('favorites'))\n            const duplicates = favorites.filter(\n                (favorite) => favorite.address.cityName === address.cityName\n            )\n            if (!duplicates.length) {\n                // add newly added favorite to old favorites\n                const updatedFavorites = [...favorites, {address, latlong}]\n                localStorage.setItem('favorites', JSON.stringify(updatedFavorites))\n                updateFavorites({\n                    favorites: updatedFavorites,\n                })\n            } else {\n                // if already favorite is selected\n                // remove it from favorites\n                const removeIndex = favorites.findIndex(\n                    (favorite) =>\n                        favorite.address.cityName === duplicates[0].address.cityName\n                )\n                if (removeIndex !== -1) {\n                    const newFavorites = [...favorites]\n                    newFavorites.splice(removeIndex, 1)\n                    localStorage.setItem('favorites', JSON.stringify(newFavorites))\n                    updateFavorites({\n                        favorites: newFavorites,\n                    })\n                }\n            }\n        }\n    }\n\n    // format and set date & time based on the dateObj\n    const datetimeSetter = (dateObj) => {\n        setDate(!isUndefined(dateObj) ? dateObj.format('dddd, DD. MMMM YYYY') : '')\n        setTime(!isUndefined(dateObj) ? dateObj.format('HH:mm:ss') : '')\n        formattedDateTimeRef.current = dateObj ? dateObj : null\n    }\n\n    useEffect(() => {\n        // reset date & time whenever weatherCurrent change\n        datetimeSetter(\n            moment(weatherCurrent.dt * 1000).tz(weatherCurrent.timezone)\n        )\n\n        const dateTimer = setInterval(() => {\n            if (weatherCurrent.dt) {\n                // update date and time every second only when there is a valid timestamp\n                const formattedDateTimeObj = moment\n                    .tz(formattedDateTimeRef.current, weatherCurrent.timezone)\n                    .add(1, 's')\n                datetimeSetter(formattedDateTimeObj)\n            }\n        }, 1000)\n        return () => {\n            clearInterval(dateTimer)\n        }\n        // eslint-disable-next-line\n    }, [weatherCurrent])\n\n    return (\n        <div className='flex justify-between items-start'>\n            <div className='pt-4 px-4'>\n                <p className='font-bold'>{address.cityName}</p>\n                <div className='sm:flex-col md:flex md:flex-row font-light'>\n                    {!isEmpty(date) && !isEmpty(time) ? (\n                        <Fragment>\n                            <p>\n                                {date}\n                                <span className='invisible md:visible'>&nbsp;|&nbsp;</span>\n                            </p>\n                            <p>{time}</p>\n                        </Fragment>\n                    ) : null}\n                </div>\n            </div>\n            <div\n                className='mt-6 mr-6 cursor-pointer text-2xl'\n                title={\n                    isBookmarked()\n                        ? 'Favorite entfernen'\n                        : 'Stadt zu Favoriten hinzufügen'\n                }\n                onClick={favoritesHandler}>\n                {isBookmarked() ? <FaHeart/> : <FaRegHeart/>}\n            </div>\n        </div>\n    )\n}\n","/**\n * @param {Number} deg\n */\nconst getWindDirection = deg => {\n  if (deg >= 0 && deg <= 45) {\n    return 'up'\n  } else if (deg >= 46 && deg <= 90) {\n    return 'up-right'\n  } else if (deg >= 91 && deg <= 135) {\n    return 'right'\n  } else if (deg >= 136 && deg <= 180) {\n    return 'down-right'\n  } else if (deg >= 181 && deg <= 225) {\n    return 'down'\n  } else if (deg >= 226 && deg <= 270) {\n    return 'down-left'\n  } else if (deg >= 271 && deg <= 315) {\n    return 'left'\n  } else {\n    return 'up-left'\n  }\n}\n\nexport default getWindDirection\n","import FormatTime from './FormatTime'\n\n/**\n * @param {Object} data (weatherCurrent, Timeframe, day)\n */\nexport default function getWeatherIcon(data) {\n    const {time, timezone} = data\n    const {icon, id} = data.weather[0];\n    const hour = FormatTime(time, timezone, 'H')\n    const type = hour >= 6 && hour <= 18 ? 'day' : 'night'\n    if (icon) {\n        switch (icon) {\n            case '01d':\n                return 'day'\n            case '01n':\n                return 'night'\n            case '10d':\n                return `${type}-rain`\n            case '13d':\n                if (id === 611) {\n                    return 'sleet';\n                }\n                return `${type}-snow`\n            case '04d':\n            case '04n':\n                return 'cloudy'\n            case '02d':\n            case '03d':\n                return 'day-cloudy'\n            case '02n':\n            case '03n':\n                return 'night-cloudy'\n            case 'hail':\n                return 'hail'\n            case '11d':\n                return 'thunder'\n            case '50d':\n                if (id === 781) {\n                    return 'wi-tornado'\n                }\n                return `${type}-cloudy`\n            default:\n                return 'wi-na'\n        }\n    }\n    return 'wi-na'\n}\n","const mToK = speed => {\n  return Math.round(speed * 1.6)\n}\n\nconst kToM = speed => {\n  return Math.round(speed * 0.6)\n}\n\nexport {mToK, kToM}\n","const fToC = temp => {\n  return Math.round(((temp - 32) * 5) / 9)\n}\n\nconst cToF = temp => {\n  return Math.round((temp * 9) / 5 + 32)\n}\n\nexport {fToC, cToF}\n","import React from 'react'\nimport {\n  WiDirectionUp,\n  WiDirectionUpRight,\n  WiDirectionRight,\n  WiDirectionDownRight,\n  WiDirectionDown,\n  WiDirectionDownLeft,\n  WiDirectionLeft,\n  WiDirectionUpLeft,\n  WiDayFog,\n  WiNightFog,\n  WiDayCloudyWindy,\n  WiNightAltCloudyWindy,\n  WiTornado,\n  WiNa,\n  WiSunrise,\n  WiSunset\n} from 'react-icons/wi'\n\nexport default ({type}) => {\n  const ICON_TYPES = {\n    'wi-day-fog': <WiDayFog />,\n    'wi-night-fog': <WiNightFog />,\n    'wi-day-windy': <WiDayCloudyWindy />,\n    'wi-night-windy': <WiNightAltCloudyWindy />,\n    'wi-tornado': <WiTornado />,\n    'wi-na': <WiNa />,\n    up: <WiDirectionUp />,\n    'up-right': <WiDirectionUpRight />,\n    right: <WiDirectionRight />,\n    'down-right': <WiDirectionDownRight />,\n    down: <WiDirectionDown />,\n    'down-left': <WiDirectionDownLeft />,\n    left: <WiDirectionLeft />,\n    'up-left': <WiDirectionUpLeft />,\n    sunrise: <WiSunrise />,\n    sunset: <WiSunset />\n  }\n\n  return ICON_TYPES[type] || <WiNa />\n}\n","import React, {Fragment, useContext} from 'react'\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\nimport getWindDirection from '../../../utils/WindDirection'\nimport getWeatherIcon from '../../../utils/WeatherIcon'\nimport {kToM} from '../../../utils/SpeedConvert'\nimport {cToF} from '../../../utils/TemperatureConvert'\nimport {FiPercent} from 'react-icons/fi'\nimport WeatherIconComponent from './WeatherIconComponent'\n\nexport default ({weatherCurrent}) => {\n\n    const {weatherUnit, updateWeatherUnit} = useContext(WeatherUnitContext)\n\n    /**\n     * type can be `temp` or `feels_like`\n     * @param {String} type\n     */\n    const computedTempValue = (type) => {\n        return weatherUnit === 'C'\n            ? Math.round(weatherCurrent[`${type}`])\n            : cToF(weatherCurrent[`${type}`])\n    }\n\n    const computedSpeedValue = () => {\n        return weatherUnit === 'C'\n            ? `${Math.round(weatherCurrent.wind_speed * 3.6)} kmph`\n            : `${kToM(weatherCurrent.wind_speed * 3.6)} mph`\n    }\n\n    return (\n        <Fragment>\n            <div className='sm:flex-col md:flex md:flex-row justify-between my-2 px-6 sm:mt-5 sm:mb-5 sm:px-4'>\n                <div className='flex-col sm:w-full lg:w-1/2'>\n                    <div className='flex flex-row justify-center sm:justify-start sm:items-center'>\n                        <div className='flex flex-col justify-center items-center'>\n                            <div>\n                                {getWeatherIcon(weatherCurrent).startsWith('wi') ?\n                                    (\n                                        <p className='text-6xl sm:mx-2 mt-2' title={weatherCurrent.description}>\n                                            {\n                                                <WeatherIconComponent type={getWeatherIcon(weatherCurrent)}/>\n                                            }\n                                        </p>\n                                    ) : (\n                                        <img\n                                            src={`/weather/${getWeatherIcon(weatherCurrent)}.svg`}\n                                            alt='icon'\n                                            title={weatherCurrent.description}\n                                            className='-mt-2 -ml-4 sm:mx-0 w-32 h-32 object-contain'\n                                        />\n                                    )\n                                }\n                            </div>\n                            <p className='hidden sm:flex sm:flex-no-wrap font-medium -mt-2 ml-3 capitalize'>\n                                {weatherCurrent.weather[0].description}\n                            </p>\n                        </div>\n                        <div className='flex justify-start items-center sm:-mt-3 sm:ml-3'>\n                            <div>\n                                <span className='text-6xl font-bold'> {computedTempValue('temp')}</span>\n                            </div>\n                            <p className='-mt-8 text-3xl'>\n                                <sup>o</sup>\n                            </p>\n                            <div className='-mt-10 mx-2 text-xl'>\n                                <span\n                                    className={`cursor-pointer ${weatherUnit === 'C' ? 'font-bold border-b border-light' : 'font-light opacity-75'}`}\n                                    title='Celsius'\n                                    onClick={() => updateWeatherUnit('C')}>                  C\n                                </span>\n                                <span className={`mx-1 opacity-25`}>|</span>\n                                <span\n                                    className={`cursor-pointer ${weatherUnit === 'F' ? 'font-bold border-b border-light' : 'font-light opacity-75'}`}\n                                    title='Fahrenheit'\n                                    onClick={() => updateWeatherUnit('F')}>F\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* weather info */}\n                <div className='flex flex-col justify-center items-center sm:mt-6 sm:w-full lg:w-1/2'>\n                    <p className='sm:hidden font-medium capitalize text-2xl -mt-2 mb-2'>\n                        {weatherCurrent.description}\n                    </p>\n                    <div className='text-sm sm:text-lg ml-8 mt-3 sm:mt-0'>\n                        <div className='flex flex-row sm:my-2'>\n                            <p className='font-light'>Feuchtigkeit:</p>&nbsp;\n                            <p className='mx-1 font-bold'>\n                                {Math.round(weatherCurrent.humidity)}\n                            </p>\n                            <p className='text-sm mt-1'>\n                                <FiPercent/>\n                            </p>\n                        </div>\n                        <div className='flex items-center sm:my-2'>\n                            <p>\n                                <span className='font-light'>Wind:</span>&nbsp;\n                                <span className='font-bold'>{computedSpeedValue()} </span>\n                            </p>\n                            <p className='text-3xl'>\n                                {\n                                    <WeatherIconComponent type={getWindDirection(weatherCurrent.wind_deg)}/>\n                                }\n                            </p>\n                        </div>\n                        <p>\n                            <span className='font-light sm:my-2'>Gefühlt:</span>&nbsp;\n                            <span className='font-bold'>\n                                {\n                                    computedTempValue('feels_like')\n                                }\n                            </span>\n                            <sup>o</sup>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n","import React, {Fragment} from 'react'\nimport InfoComponent from '../../components/weather/weather/InfoComponent'\nimport InfoDetailComponent from '../../components/weather/weather/InfoDetailComponent'\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\n\nexport default ({weatherCurrent, address, latlong}) => {\n  return (\n    <ErrorBoundaryContainer>\n      <Fragment>\n        {address && weatherCurrent ? (\n          <div>\n            <InfoComponent\n              address={address}\n              latlong={latlong}\n              weatherCurrent={weatherCurrent}\n            />\n            <InfoDetailComponent weatherCurrent={weatherCurrent} />\n          </div>\n        ) : (\n          <LoaderComponent />\n        )}\n      </Fragment>\n    </ErrorBoundaryContainer>\n  )\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\nimport {cToF, fToC} from '../../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../../utils/WeatherIcon'\nimport FormatTime from '.././../../utils/FormatTime'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../../context/ThemeContext'\n\nexport default (props) => {\n    const {day, index, selectedIndex} = props\n    const {weatherUnit} = useContext(WeatherUnitContext)\n    const {theme, colorTheme} = useContext(ThemeContext)\n\n    /**\n     * type can be 'High' or 'Low'\n     * @param {String} type\n     */\n    const computedTempValue = (type) => {\n        return weatherUnit === 'C'\n            ? Math.round(type === \"day\" ? day.temp.day : day.temp.night)\n            : cToF(type === \"day\" ? day.temp.day : day.temp.night)\n    }\n\n    // emit event to forecastContainer\n    const selectedDay = () => {\n        props.selectedDay({day})\n    }\n\n    return (\n        <div\n            className={`md:hover:bg-${theme} md:hover:text-${colorTheme} items-center text-center sm:flex-1 sm:py-1 sm:pb-3 cursor-pointer  ${\n                index === selectedIndex ? `bg-${theme} text-${colorTheme}` : ''\n            }`}\n            onClick={selectedDay}>\n            <div className='flex flex-row flex-no-wrap sm:flex-col sm:flex-wrap justify-around items-center px-2'>\n                <p className='flex w-1/6 sm:w-full sm:justify-center text-base font-semibold'>\n                    {new Date(day.dt * 1000).toLocaleString('de-DE', {weekday: \"short\"})}\n                </p>\n                {/* icon */}\n                <div className='flex w-1/6 sm:w-full'>\n                    {getWeatherIcon(day).startsWith('wi') ? (\n                        <p\n                            className='my-1 sm:mt-1 sm:mb-3 mx-auto text-3xl'\n                            title={day.description}>\n                            <WeatherIconComponent type={getWeatherIcon(day)}/>\n                        </p>\n                    ) : (\n                        <img\n                            src={`/weather/${getWeatherIcon(day)}.svg`}\n                            alt='icon'\n                            title={day.description}\n                            className='sm:-mt-2 sm:-mb-1 mx-auto w-12 h-12 sm:w-16 sm:h-16 object-contain'\n                        />\n                    )}\n                </div>\n                {/* high & low */}\n                <div className='flex flex-row justify-center items-center font-light w-1/4 sm:w-full mt-1 sm:mt-0'>\n                    <p className='mx-2 text-xs sm:text-sm'>\n                        {computedTempValue('day')}\n                        <sup>o</sup>\n                    </p>\n                    <p className='mx-2 text-xs'>\n                        {computedTempValue('night')}\n                        <sup>o</sup>\n                    </p>\n                </div>\n                {/* sunrise & sunset */}\n                <div\n                    className={`flex flex-row justify-around sm:justify-center sm:flex sm:flex-col w-5/12 sm:w-full font-light mt-1`}>\n                    <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n                        <p\n                            className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\n                            title='sunrise'>\n                            <WeatherIconComponent type='sunrise'/>\n                        </p>\n                        <p>{FormatTime(day.sunrise, day.timezone, 'HH:mm')}</p>\n                    </div>\n                    <div className='flex flex-row justify-center items-center mx-2 sm:my-1 text-xs sm:text-sm'>\n                        <p\n                            className='text-xl lg:text-2xl text-sun mr-2 md:mr-3'\n                            title='sunset'>\n                            <WeatherIconComponent type='sunset'/>\n                        </p>\n                        <p>{FormatTime(day.sunset, day.timezone, 'HH:mm')}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {useContext} from 'react'\nimport {WeatherUnitContext} from '../../../context/WeatherUnitContext'\nimport {cToF, fToC} from '../../../utils/TemperatureConvert'\nimport getWeatherIcon from '../../../utils/WeatherIcon'\nimport FormatTime from '.././../../utils/FormatTime'\nimport WeatherIconComponent from './WeatherIconComponent'\nimport {ThemeContext} from '../../../context/ThemeContext'\n\n\nexport default ({Timeframe}) => {\n    const {weatherUnit} = useContext(WeatherUnitContext)\n    const {theme, colorTheme} = useContext(ThemeContext)\n\n    /**\n     * type can be `temp` or `feels_like`\n     * @param {String} type\n     */\n    const computedTempValue = (type) => {\n        return weatherUnit === 'C'\n            ? Math.round(Timeframe[`${type}`])\n            : cToF(Timeframe[`${type}`])\n    }\n\n    return (\n        <div\n            className={`border-none flex flex-col justify-start items-center mx-3 mb-3 w-full font-light text-${theme} md:text-light`}>\n            <div>\n                {getWeatherIcon(Timeframe).startsWith('wi') ? (\n                    <p className='text-5xl mt-4' title={Timeframe.description}>\n                        <WeatherIconComponent type={getWeatherIcon(Timeframe)}/>\n                    </p>\n                ) : (\n                    <img\n                        src={`/weather/${getWeatherIcon(Timeframe)}.svg`}\n                        alt='icon'\n                        title={Timeframe.description}\n                        className='w-16 h-16 object-contain'\n                    />\n                )}\n            </div>\n            <p className='text-base pb-1'>\n                {computedTempValue('temp')}\n                <sup>o</sup>\n            </p>\n            <p className='text-xs pb-1'>\n                {computedTempValue('feels_like')}\n                <sup>o</sup>\n            </p>\n            <p className='text-sm font-medium'>\n                {FormatTime(Timeframe.dt, Timeframe.timezone, 'HH:mm')}\n            </p>\n        </div>\n    )\n}\n","import React, {Fragment, useEffect, useState} from 'react'\nimport {isEmpty, isUndefined} from 'lodash-es'\nimport Carousel from 'nuka-carousel'\nimport DayComponent from '../../components/weather/weather/DayComponent'\nimport TimeframeComponent from '../../components/weather/weather/TimeframeComponent'\nimport LoaderComponent from '../../components/weather/loader/LoaderComponent'\nimport CarouselSettings from '../../utils/CarouselSettings'\nimport ErrorComponent from '../../components/weather/error/ErrorComponent'\nimport ErrorBoundaryContainer from '../error-boundary/ErrorBoundaryContainer'\nimport FormatTime from './../../utils/FormatTime'\n\nexport default ({cityName, weatherCurrent, weatherForecast}) => {\n    const [selectedDay, setSelectedDay] = useState('')\n    const [selectedDayIndex, setSelectedDayIndex] = useState(0)\n    const {dt, timezone} = weatherCurrent\n    // set the selectedDay to the current day by fetching current city date from weatherCurrent timestamp\n    const updateSelectedDay = async () => {\n        // show forecast elements when formattedDateTime is not an empty string & an error message starting with Failed\n        if (!isUndefined(weatherCurrent.dt)) {\n            const today = FormatTime(dt, timezone, 'MM/DD/YYYY')\n            // check if today key exist in days\n            if (!isEmpty(weatherForecast) && !isUndefined(weatherForecast)) {\n                setSelectedDay(weatherForecast.days[today] ? today : '')\n                selectedDayIndexHandler(weatherForecast.days[today] ? today : '')\n            }\n        }\n    }\n\n    // find the index of selectedDay in days object\n    const selectedDayIndexHandler = selectedDay => {\n        const index = Object.keys(weatherForecast.days).indexOf(selectedDay)\n        setSelectedDayIndex(index !== -1 ? index : 0)\n    }\n\n    /**\n     * day is a date '02/28/2020'\n     * @param {String} day\n     */\n    const daySelectHandler = day => {\n        setSelectedDay(day)\n        selectedDayIndexHandler(day)\n    }\n\n    useEffect(() => {\n        updateSelectedDay()\n        // eslint-disable-next-line\n    }, [weatherForecast])\n\n    return (\n        <ErrorBoundaryContainer>\n            <Fragment>\n                {!isEmpty(weatherForecast.days) && !isEmpty(selectedDay) ? (\n                    <Fragment>\n                         {/*mobile*/}\n                        <div className='sm:hidden pb-3'>\n                            {weatherForecast.timeFrames[selectedDay] ? (\n                                <Carousel {...CarouselSettings('time')}>\n                                    {weatherForecast.timeFrames[selectedDay].map(\n                                        (Timeframe, index) => {\n                                            return (\n                                                <TimeframeComponent Timeframe={Timeframe} key={index}/>\n                                            )\n                                        }\n                                    )}\n                                </Carousel>\n                            ) : (\n                                <ErrorComponent\n                                    errorMessage={`Keine stündliche Vorhersage verfügbar für ${selectedDay}`}\n                                />\n                            )}\n                        </div>\n\n                        {/* tablet and above devices */}\n                        <div className='hidden sm:flex sm:pb-3 sm:mb-4'>\n                            {weatherForecast.timeFrames[selectedDay] ? (\n                                <Carousel {...CarouselSettings('time', 'tablet')}>\n                                    {weatherForecast.timeFrames[selectedDay].map(\n                                        (Timeframe, index) => {\n                                            return (\n                                                <TimeframeComponent Timeframe={Timeframe} key={index}/>\n                                            )\n                                        }\n                                    )}\n                                </Carousel>\n                            ) : (\n                                <ErrorComponent\n                                    errorMessage={`Keine stündliche Vorhersage verfügbar für ${selectedDay}`}\n                                />\n                            )}\n                        </div>\n                        <div\n                            className={`flex flex-col mt-4 sm:mt-0 sm:flex-row w-full rounded`}>\n                            {Object.keys(weatherForecast.days).map((day, index) => {\n                                // day is key in weatherForecast.days -> '02/28/2020'\n                                // index is the position of key -> 0\n                                return (\n                                    <DayComponent\n                                        day={weatherForecast.days[day]}\n                                        key={index}\n                                        index={index}\n                                        selectedIndex={selectedDayIndex}\n                                        selectedDay={() => daySelectHandler(day)}\n                                    />\n                                )\n                            })}\n                        </div>\n                    </Fragment>\n                ) : (\n                    <div className='mb-3'>\n                        {isEmpty(weatherForecast.days) ? (\n                            <ErrorComponent\n                                errorMessage={'Für diese Stadt sind keine Vorhersagedaten verfügbar!'}\n                                showCloseBtn={false}\n                            />\n                        ) : (\n                            <LoaderComponent\n                                loaderText={`Wettervorhersage für ${cityName} wird abgerufen.`}\n                            />\n                        )}\n                    </div>\n                )}\n            </Fragment>\n        </ErrorBoundaryContainer>\n    )\n}\n","import React, {useContext} from 'react'\nimport {FaExclamationTriangle} from 'react-icons/fa'\nimport {ThemeContext} from '../../../context/ThemeContext'\nimport FormatTime from '.././../../utils/FormatTime'\n\nexport default ({alert}) => {\n    const {timezone, event, start, end, description, sender_name} = alert\n    const {theme, colorTheme} = useContext(ThemeContext)\n    const startTime = FormatTime(start, timezone, 'dddd h:mm A')\n    const endTime = FormatTime(end, timezone, 'dddd h:mm A')\n\n    return (\n        <div className={'flex flex-col justify-center items-center'}>\n            <div className={`w-11/12 lg:w-3/4 xl:max-w-5xl`}>\n                <div\n                    className={`bg-${theme} border-t-4 border border-red-700 rounded-lg text-${colorTheme} px-3 py-3 shadow-xl`}\n                    role='alert'>\n                    <div className='flex'>\n                        <div className='pt-1 px-2'>\n                                <FaExclamationTriangle\n                                    className={`text-red-700 text-lg`}\n                                    title=\"Warnung\"\n                                />\n                        </div>\n                        <div className='w-full'>\n                            <div className='flex flex-col sm:flex-row sm:justify-between sm:items-center'>\n                                <p className='sm:w-1/2 font-bold capitalize'>\n                                    {event}\n                                </p>\n                                <p className='sm:w-1/2 sm:text-right font-semibold text-xs'>\n                                    <span>{startTime}</span>\n                                    &nbsp;<span>-</span>&nbsp;\n                                    <span>{endTime}</span>\n                                </p>\n                            </div>\n                                <p className='text-sm font-medium py-8'>\n                                    <b>Description:&nbsp;</b>\n                                    {description}\n                                </p>\n                            <b>Sender: {sender_name}</b>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, {Fragment, useContext, useState} from 'react'\nimport {ThemeContext} from '../../context/ThemeContext'\nimport getWeatherBackground from './../../utils/WeatherBackground'\nimport CurrentWeatherContainer from './../current-weather/CurrentWeatherContainer'\nimport ForecastContainer from './../forecast/ForecastContainer'\nimport './WeatherForecastStyle.scss'\nimport AlertComponent from '../../components/weather/weather/AlertComponent'\nimport {isEmpty} from 'lodash-es'\n\nexport default ({weatherCurrent, weatherForecast, alerts, address, latlong,}) => {\n    const {theme, colorTheme} = useContext(ThemeContext)\n\n    const WET_TYPES = ['10d', '13d', '09d']\n\n    // return rain or snow svg image for the above wet types\n    const weatherSVG = () => {\n        if (weatherCurrent.weather[0].icon === '13d') {\n            return 'snow'\n        }\n        return 'rain'\n    }\n\n    const imageBorder = {\n        borderTopLeftRadius: '1rem',\n        borderTopRightRadius: '1rem',\n    }\n\n    const [showAlerts, setShowAlerts] = useState(true)\n\n    const toggleWeatherAlerts = () => {\n        setShowAlerts(!showAlerts)\n    }\n\n    return (\n        <Fragment>\n            <div\n                className={'flex flex-col justify-center items-center lg:px-5 pt-10'}>\n                <div\n                    className={`sm:w-full lg:w-5/6 xl:max-w-6xl bg-${theme} text-${colorTheme} border border-${colorTheme} md:border-none rounded-t-2xl shadow-lg`}>\n                    <div className='relative overflow-hidden'>\n                        <img\n                            src={`/weather-backgrounds/${getWeatherBackground(\n                                weatherCurrent\n                            )}.jpg`}\n                            alt='clear day'\n                            className='w-full object-cover object-center weather-background'\n                            style={imageBorder}\n                        />\n                         {/*show rain or snow svg only when weather icon exist in WET_TYPES*/}\n                        <div>\n                            {WET_TYPES.includes(weatherCurrent.weather[0].icon) && (\n                                <img\n                                    src={`/weather-backgrounds/${weatherSVG()}.svg`}\n                                    alt='clear day'\n                                    className='w-full object-cover object-center absolute top-0 right-0 bottom-0 left-0 weather-background'\n                                    style={imageBorder}\n                                />\n                            )}\n                        </div>\n\n                        {/* current weather container should be on the image on mobile and small devices */}\n                        <div\n                            className='block md:hidden absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n                            style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n                            <CurrentWeatherContainer\n                                weatherCurrent={weatherCurrent}\n                                address={address}\n                                latlong={latlong}\n                            />\n                        </div>\n\n                        {/* current weather and forecast container should be on the image from medium devices */}\n                        <div\n                            className='hidden md:block absolute top-0 bottom-0 left-0 right-0 my-auto mx-auto text-light'\n                            style={{background: 'rgba(0,0,0,0.2)', ...imageBorder}}>\n                            <CurrentWeatherContainer\n                                weatherCurrent={weatherCurrent}\n                                address={address}\n                                latlong={latlong}\n                            />\n                            <ForecastContainer\n                                cityName={address.cityName}\n                                weatherCurrent={weatherCurrent}\n                                weatherForecast={weatherForecast}\n                            />\n                        </div>\n                    </div>\n\n                    <div className='block md:hidden'>\n                        <ForecastContainer\n                            cityName={address.cityName}\n                            weatherCurrent={weatherCurrent}\n                            weatherForecast={weatherForecast}\n                        />\n                    </div>\n                </div>\n            </div>\n\n            <div className='relative'>\n                {/* weather alerts */}\n                {!isEmpty(alerts) ? (\n                    <Fragment>\n                        <div className='text-center pb-5'>\n                            <p>\n                                <button\n                                    className={`bg-${colorTheme} text-${theme} font-semibold mt-6 py-3 px-6 rounded-full capitalize`}\n                                    onClick={toggleWeatherAlerts}>\n                                    {showAlerts ? 'Verstecke' : 'Anzeigen'} Wetter Warnungen\n                                </button>\n                            </p>\n                        </div>\n                        <div className='pb-5'>\n                            {showAlerts ? (\n                                <Fragment>\n                                    {alerts.map((alert, index) => {\n                                        return (\n                                            <div className='my-2' key={index}>\n                                                <AlertComponent alert={alert}/>\n                                            </div>\n                                        )\n                                    })}\n                                </Fragment>\n                            ) : null}\n                        </div>\n                    </Fragment>\n                ) : null}\n            </div>\n         </Fragment>\n    )\n}\n","import moment from 'moment-timezone'\n\n/**\n * @param {Number} timestamp\n * @param {String} timezone\n * @param {String} formatType (moment format types)\n */\nexport default(timestamp, timezone, formatType) => {\n  return moment.tz(timestamp * 1000, timezone).format(formatType)\n}\n"],"sourceRoot":""}